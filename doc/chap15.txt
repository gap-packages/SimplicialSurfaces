  
  [1X15 [33X[0;0YGraphs and isomorphisms[133X[101X
  
  [33X[0;0YThis  chapter  is  concerned  with  different graphs associated to (twisted)
  polygonal complexes, as well as isomorphisms and automorphisms.[133X
  
  [33X[0;0YA  twisted  polygonal  complex  can  be  completely described by its chamber
  adjacencies,  which  can  be  encoded as an edge-coloured graph. A polygonal
  complex  is  completely  determined by its incidence structure, which can be
  encoded  as  a  vertex-coloured graph. Thus, the isomorphism problem between
  (twisted) polygonal complexes reduces to the graph isomorphism problem.[133X
  
  [33X[0;0YMost of the methods in this chapter need access to one of the graph packages
  in [5XGAP[105X (check the method descriptions to see whether a certain graph package
  is  sufficient  to execute the method). Currently supported are the packages
  [9XDigraphs[109X,  [9XGRAPE[109X  and [9XNautyTracesInterface[109X. A discussion of their individual
  merits is postponed to Section [14X15.1[114X.[133X
  
  [33X[0;0YSections  [14X15.2[114X  and  [14X15.3[114X  introduce  the  incidence  graph  and the chamber
  adjacency  graph.  Although isomorphism testing and automorphism computation
  relies on them, these sections are in general not necessary in practice.[133X
  
  [33X[0;0YSection  [14X15.4[114X  describes  the  edge  graph and the face graph of a polygonal
  complex. They are used in practice like in [14X15.4-3[114X.[133X
  
  [33X[0;0YSection [14X15.5[114X contains the isomorphism method [9XIsIsomorphic[109X ([14X15.5-1[114X).[133X
  
  [33X[0;0YSection  [14X15.6[114X  explains  in  detail  how  to  use  the automorphism group of
  (twisted)   polygonal   complexes.  Section  [14X15.7[114X  explores  the  action  of
  automorphisms on paths.[133X
  
  
  [1X15.1 [33X[0;0YWhich graph package should be used?[133X[101X
  
  [33X[0;0YThe  [9XSimplicialSurface[109X-package  supports  three  different  graph  packages:
  [9XDigraphs[109X, [9XGRAPE[109X and [9XNautyTracesInterface[109X.[133X
  
  [33X[0;0YThey have different benefits and disadvantages and are therefore recommended
  for different uses:[133X
  
  [30X    [33X[0;6Y[9XNautyTracesInterface[109X:  This package is designed for the single purpose
        of  enabling  a  fast  interface  to  [9XNauty/Traces[109X. In this measure it
        excels. On almost all other measures it does not compete.[133X
  
        [33X[0;6YTherefore  it  is  recommended  to have this package available to make
        isomorphism  testing  and  automorphism  computation  fast.  For other
        purposes it is not recommended.[133X
  
  [30X    [33X[0;6Y[9XGRAPE[109X:  This  package  is designed to work with graphs that have large
        automorphism  groups. Unfortunately it is written in a way that is not
        fully  compatible  with modern [5XGAP[105X. Therefore it is often necessary to
        perform  [9XShallowCopy[109X  on  a graph before any methods can be applied to
        it.[133X
  
        [33X[0;6YIts main advantage is that it works out of the box.[133X
  
  [30X    [33X[0;6Y[9XDigraphs[109X:  This  package  has  the  goal of becoming the leading graph
        package  in [5XGAP[105X. It is still developed further but there are sometimes
        problems with its installation.[133X
  
        [33X[0;6YIf  the  installation  is  working  though,  it  is recommended to use
        [9XDigraphs[109X instead of [9XGRAPE[109X.[133X
  
  [33X[0;0YTo  get  information about a graph is for [9XNautyTracesInterface[109X and [9XGRAPE[109X not
  so nice as for [9XDigraphs[109X. The different ways to get the information are shown
  in section [14X15.2[114X.[133X
  
  
  [1X15.2 [33X[0;0YIncidence graph[133X[101X
  
  [33X[0;0YThe  incidence  relation  (which  is  central  to  our  concept of polygonal
  complexes,  compare  chapter  [14X2[114X) can be interpreted as a coloured undirected
  graph, the [13Xincidence graph[113X of the polygonal complex.[133X
  
  [33X[0;0YThe  vertices  of  this  incidence graph consist of all vertices (colour 0),
  edges (colour 1) and faces (colour 2) of the polygonal complex. The edges of
  the  incidence  graph  are  given by pairs of vertices-edges and edges-faces
  that are incident to each other.[133X
  
  [33X[0;0YAs  an  example,  consider  the  polygonal  surface  from section [14X3.2[114X: Image
  omitted in terminal text[133X
  
  [33X[0;0YUnfortunately  the  vertex  labels  of the graph in [5XGAP[105X have to be distinct,
  which  is  not  guaranteed  in general. Therefore we shift the labels of the
  edges  by  the  maximal  vertex  label and the face labels by the sum of the
  maximal  vertex  and  edge  labels.  In the example above the maximal vertex
  label  is  11  and  the  maximal edge label is 13. It would be modified like
  this: Image omitted in terminal text[133X
  
  [33X[0;0YThe  incidence  graph  is given as a [5XGAP[105X-graph. Currently these packages are
  supported: [9XDigraphs[109X, [9XGRAPE[109X and [9XNautyTracesInterface[109X.[133X
  
  [1X15.2-1 IncidenceDigraphsGraph[101X
  
  [33X[1;0Y[29X[2XIncidenceDigraphsGraph[102X( [3Xcomplex[103X ) [32X attribute[133X
  [33X[1;0Y[29X[2XIncidenceGrapeGraph[102X( [3Xcomplex[103X ) [32X attribute[133X
  [33X[1;0Y[29X[2XIncidenceNautyGraph[102X( [3Xcomplex[103X ) [32X attribute[133X
  [6XReturns:[106X  [33X[0;10Ya   graph   as   defined   in   the   package   [9XDigraphs[109X,[9XGRAPE[109X  or
            [9XNautyTracesInterface[109X[133X
  
  [33X[0;0YReturn  the  incidence  graph  (a  coloured,  undirected graph) of the given
  polygonal complex. The incidence graph is defined as follows:[133X
  
  [30X    [33X[0;6YThe  [13Xvertices[113X  are the vertices (colour 0), edges (colour 1) and faces
        (colour 2) of [3Xcomplex[103X. The labels are shifted in the following way:[133X
  
        [30X    [33X[0;12YThe vertex numbers are not modified[133X
  
        [30X    [33X[0;12YThe  edge  numbers  are  shifted  upwards  by the maximal vertex
              number[133X
  
        [30X    [33X[0;12YThe  face  numbers are shifted upwards by the sum of the maximal
              vertex number and the maximal edge number[133X
  
  [30X    [33X[0;6YThe  [13Xedges[113X  are  vertex-edge-pairs  or  edge-face-pairs  such that the
        elements of the pair are incident in [3Xcomplex[103X.[133X
  
  [33X[0;0YThe returned graph can be given in three different formats, corresponding to
  different graph packages: [9XDigraphs[109X, [9XGRAPE[109X and [9XNautyTracesInterface[109X.[133X
  
  [33X[0;0YConsider the polygonal complex at the begin of section [14X15.2[114X:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xcomplex := PolygonalComplexByDownwardIncidence([127X[104X
    [4X[25X>[125X [27X       [ , , , , , [2,5], , [2,3], [3,5], [11,5], , [3,7], [7,11] ],[127X[104X
    [4X[25X>[125X [27X       [[6,8,9], , , [9,10,12,13]]);[127X[104X
    [4X[28Xpolygonal surface (5 vertices, 6 edges, and 2 faces)[128X[104X
  [4X[32X[104X
  
  [33X[0;0YFirst of all look at the graph given by [9XDigraphs[109X:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xdigraph := IncidenceDigraphsGraph(complex);;[127X[104X
    [4X[25Xgap>[125X [27XDigraphVertices(digraph);[127X[104X
    [4X[28X[ 1 .. 13 ][128X[104X
    [4X[25Xgap>[125X [27XDigraphVertexLabels(digraph);[127X[104X
    [4X[28X[ 2, 3, 5, 7, 11, 17, 19, 20, 21, 23, 24, 25, 28 ][128X[104X
    [4X[25Xgap>[125X [27XDigraphEdges(digraph);[127X[104X
    [4X[28X[ [ 1, 6 ], [ 1, 7 ], [ 2, 7 ], [ 2, 8 ], [ 2, 10 ], [ 3, 6 ], [ 3, 8 ],[128X[104X
    [4X[28X[ 3, 9 ], [ 4, 10 ], [ 4, 11 ], [ 5, 9 ], [ 5, 11 ], [ 6, 1 ], [ 6, 3 ],[128X[104X
    [4X[28X[ 6, 12 ], [ 7, 1 ], [ 7, 2 ], [ 7, 12 ], [ 8, 2 ], [ 8, 3 ], [ 8, 12 ],[128X[104X
    [4X[28X[ 8, 13 ], [ 9, 3 ], [ 9, 5 ], [ 9, 13 ], [ 10, 2 ], [ 10, 4 ], [ 10, 13 ],[128X[104X
    [4X[28X[ 11, 4 ], [ 11, 5 ], [ 11, 13 ], [ 12, 6 ], [ 12, 7 ], [ 12, 8 ], [ 13, 8 ],[128X[104X
    [4X[28X[ 13, 9 ], [ 13, 10 ], [ 13, 11 ] ] [128X[104X
  [4X[32X[104X
  
  [33X[0;0YConsider how getting information from a graph given by [9XGRAPE[109X looks like:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xgrape := IncidenceGrapeGraph(complex).graph;;[127X[104X
    [4X[25Xgap>[125X [27XDirectedEdges(grape)=DigraphEdges(digraph);[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [33X[0;0YFinally,   consider   how   getting   information  from  a  graph  given  by
  [9XNautyTracesInterface[109X looks like:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xnauty:=UnderlyingNautyGraph(IncidenceNautyGraph(complex));;[127X[104X
    [4X[25Xgap>[125X [27XnautyEdges:=nauty!.edges;[127X[104X
    [4X[28X[ [ 1, 6 ], [ 3, 6 ], [ 1, 7 ], [ 2, 7 ], [ 2, 8 ], [ 3, 8 ], [ 3, 9 ], [ 5, 9 ],[128X[104X
    [4X[28X[ 2, 10 ], [ 4, 10 ], [ 4, 11 ], [ 5, 11 ], [ 6, 12 ],[128X[104X
    [4X[28X[ 7, 12 ], [ 8, 12 ], [ 8, 13 ], [ 9, 13 ], [ 10, 13 ], [ 11, 13 ] ][128X[104X
    [4X[25Xgap>[125X [27XnautyEdges=DigraphEdges(digraph);[127X[104X
    [4X[28Xfalse[128X[104X
  [4X[32X[104X
  
  [33X[0;0YThe  edges  of  the  nauty incidence graph are not equal to the edges of the
  digraph, since the edges from the nauty graph are undirected.[133X
  
  
  [1X15.3 [33X[0;0YChamber adjacency graph[133X[101X
  
  [33X[0;0YTo  describe  a  twisted  polygonal  complex  (compare  Section  [14X2.2[114X), it is
  sufficient  to know its chambers and their adjacencies. These can be encoded
  as an edge-coloured graph:[133X
  
  [30X    [33X[0;6YThe vertices are the set of chambers.[133X
  
  [30X    [33X[0;6YIf  two  chambers  are [22Xk[122X-adjacent, there is an edge labelled [22Xk[122X between
        these two chambers.[133X
  
  [33X[0;0YIn this fashion, we obtain an undirected graph whose edges are coloured with
  the colours 0, 1, and 2.[133X
  
  [33X[0;0YUnfortunately,   the   [5XGAP[105X-packages   [9XGRAPE[109X  and  [9XDigraphs[109X  do  not  support
  edge-coloured   graphs.   Therefore,   only  the  graphs  from  the  package
  [9XNautyTracesInterface[109X are supported.[133X
  
  [1X15.3-1 ChamberAdjacencyGraph[101X
  
  [33X[1;0Y[29X[2XChamberAdjacencyGraph[102X( [3Xcomplex[103X ) [32X attribute[133X
  [6XReturns:[106X  [33X[0;10Ya graph as defined in the package [9XNautyTracesInterface[109X[133X
  
  [33X[0;0YReturn  the  chamber adjacency graph (an edge-coloured, undirected graph) of
  the given twisted polygonal complex. It is defined as follows:[133X
  
  [30X    [33X[0;6YThe [13Xvertices[113X are the chambers of [3Xcomplex[103X.[133X
  
  [30X    [33X[0;6YIf  two  chambers  are  [22Xk[122X-adjacent  in  [3Xcomplex[103X, there is an edge with
        colour [22Xk[122X between the corresponding vertices of this graph.[133X
  
  [33X[0;0YSince  [9XGRAPE[109X and [9XDigraphs[109X currently do not support edge-coloured graphs, the
  chamber   adjacency   graph   can   only   be   given   as   a   graph  from
  [9XNautyTracesInterface[109X.[133X
  
  [33X[0;0YNote  that  the  vertices  of graph from [9XNautyTracesInterface[109X have to be the
  integers from 1 to the number of chambers.[133X
  
  [33X[0;0YTODO  example  that  also  shows how we can get any information out of these
  graphs[133X
  
  
  [1X15.4 [33X[0;0YEdge and Face Graph[133X[101X
  
  [33X[0;0YFor  some  purposes  it  is  useful  to work with other associated graphs of
  polygonal  complexes.  In this section the edge graph of a polygonal complex
  and  the  face  graph of a polygonal surface is introduced. Both of them are
  implemented   for   all   supported  graph  packages:  [9XDigraphs[109X,  [9XGRAPE[109X  and
  [9XNautyTracesInterface[109X. These graphs are useful if it is not necessary to need
  all  information of the complex. The edge graph only describes the incidence
  structure  of  vertices  and  edges.  Instead,  the face graph describes the
  incidence  structure  of edges and faces. Using method [14X15.4-3[114X it is possible
  to get all surfaces that have a common face graph.[133X
  
  [33X[0;0YThe  face graph and the edge graph of a polygonal complex are dual graphs of
  each  other. The dual graph of a planar graph G is a graph that has a vertex
  for  each  face of G and an edge for each pair of faces that intersect in at
  least one edge. For example, consider the ocathedron. The following graph is
  the  face  graph  of the octahedron: Image omitted in terminal text The edge
  graph  of  the octahedron, i.e. the dual of the face graph, is the following
  graph: Image omitted in terminal text[133X
  
  [33X[0;0YThe face graph of the octahedron is equivalent to the edge graph of the cube
  and  vice  versa.  That  means  the  dual  polyhedron  of  the  cube  is the
  octahedron. In section [14X15.4-1[114X and [14X15.4-2[114X is an example, where the edge graph
  respectively the face graph is self dual. That means that the edge graph and
  the face graph of a polygonal complex are equal.[133X
  
  [1X15.4-1 EdgeDigraphsGraph[101X
  
  [33X[1;0Y[29X[2XEdgeDigraphsGraph[102X( [3Xcomplex[103X ) [32X attribute[133X
  [33X[1;0Y[29X[2XEdgeGrapeGraph[102X( [3Xcomplex[103X ) [32X attribute[133X
  [33X[1;0Y[29X[2XEdgeNautyGraph[102X( [3Xcomplex[103X ) [32X attribute[133X
  [6XReturns:[106X  [33X[0;10Ya       graph       as       defined      in      the      package
            [9XDigraphs[109X/[9XGRAPE[109X/[9XNautyTracesInterface[109X[133X
  
  [33X[0;0YReturn  the  edge  graph of the given polygonal complex. The vertices of the
  edge  graph  are the vertices of [3Xcomplex[103X and for every edge in [3Xcomplex[103X there
  is a corresponding edge in the edge graph.[133X
  
  [33X[0;0YThe vertices of the resulting graph are always numbered from 1 to n, where n
  is  the  number of the vertices. That means if the vertex list of [3Xsurface[103X is
  not bounded, the vertices in the graph will have a different number than the
  vertices  of  [3Xsurface[103X. The same hold for the edges in Nauty. Since the edges
  in  Digraphs are directed but the edge graph is undirected, each edge of the
  edge graph is represented by two directed edges in the [9XDigraphs[109X package.[133X
  
  [33X[0;0YFor example, consider the edge graph of the tetrahedron:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xdigraph:=EdgeDigraphsGraph(Tetrahedron());[127X[104X
    [4X[28X<immutable digraph with 4 vertices, 12 edges>[128X[104X
    [4X[25Xgap>[125X [27XDigraphEdges(digraph);[127X[104X
    [4X[28X[ [ 1, 2 ], [ 2, 1 ], [ 1, 3 ], [ 3, 1 ], [ 1, 4 ], [ 4, 1 ], [ 2, 3 ], [ 3, 2 ], [128X[104X
    [4X[28X[ 2, 4 ], [ 4, 2 ], [ 3, 4 ], [ 4, 3 ] ] [128X[104X
  [4X[32X[104X
  
  [33X[0;0YThis  is  the  edge  graph  of  the tetrahedron with undirected edges: Image
  omitted in terminal text[133X
  
  [1X15.4-2 FaceDigraphsGraph[101X
  
  [33X[1;0Y[29X[2XFaceDigraphsGraph[102X( [3Xcomplex[103X ) [32X attribute[133X
  [33X[1;0Y[29X[2XFaceNautyGraph[102X( [3Xcomplex[103X ) [32X attribute[133X
  [6XReturns:[106X  [33X[0;10Ya graph as defined in the package [9XDigraphs[109X/[9XNautyTracesInterface[109X[133X
  
  [33X[0;0YReturn the face graph of a given polygonal complex. The vertices of the face
  graph  are  the  faces  of  [3Xcomplex[103X and for every edge in [3Xcomplex[103X there is a
  corresponding edge in the face graph.[133X
  
  [33X[0;0YThe  returned  graph can be given in two different formats, corresponding to
  different graph packages: [9XDigraphs[109X and [9XNautyTracesInterface[109X[133X
  
  [33X[0;0YThe  returned  graph  cannot  be  given  as  a grape graph because the [9XGRAPE[109X
  package does not allow multiple edges.[133X
  
  [33X[0;0YThe vertices of the resulting graph are always numbered from 1 to n, where n
  is  the  number  of the faces. That means if the face list of [3Xcomplex[103X is not
  bounded,  the  vertices  in  the graph will have a different number than the
  faces  of  [3Xcomplex[103X. The same hold for the edges in Nauty. Since the edges in
  Digraphs  are  directed  but  the face graph is undirected, each edge of the
  face graph is represented by two directed edges in the [9XDigraphs[109X package.[133X
  
  [33X[0;0YFor example, consider the face graph of the tetrahedron:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xdigraph:=FaceDigraphsGraph(Tetrahedron());[127X[104X
    [4X[28X<immutable digraph with 4 vertices, 12 edges>[128X[104X
    [4X[25Xgap>[125X [27XdigraphEdges:=DigraphEdges(digraph);[127X[104X
    [4X[28X[ [ 1, 2 ], [ 2, 1 ], [ 1, 4 ], [ 4, 1 ], [ 2, 4 ], [ 4, 2 ], [ 1, 3 ], [ 3, 1 ],[128X[104X
    [4X[28X[ 2, 3 ], [ 3, 2 ], [ 3, 4 ], [ 4, 3 ] ][128X[104X
  [4X[32X[104X
  
  [33X[0;0YThis  is  the  face  graph  of  the tetrahedron with undirected edges: Image
  omitted in terminal text[133X
  
  [1X15.4-3 AllSimplicialSurfacesOfDigraph[101X
  
  [33X[1;0Y[29X[2XAllSimplicialSurfacesOfDigraph[102X( [3Xdigraph[103X[, [3Xvertexfaithful[103X] ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ya list[133X
  
  [33X[0;0YReturn  all (vertex-faithful) simplicial surfaces, that have [9Xdigraph[109X as face
  graph.  If  [9Xdigraph[109X  is  not  a face graph of a (vertex-faithful) simplicial
  surface,  the empty list is returned. The parameter [9Xvertexfaithful[109X indicates
  whether only vertex-faithful simplicial surfaces are searched. The parameter
  [9Xvertexfaithful[109X  is  by  default  false.  [9Xdigraph[109X must be a cubic, connected,
  symmetric  and  simple  digraph. The vertices of a simplicial surface can be
  identified  with  certain  cycles  in  the  face graph. This method searches
  possible  combinations  of  cycles,  with  the  cycles  corresponding to the
  vertices of a simplicial surface.[133X
  
  [33X[0;0YFor  example,  consider  the  complete graph on four nodes: Image omitted in
  terminal text[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xdigraph:=CompleteDigraph(4);;[127X[104X
    [4X[25Xgap>[125X [27Xtet1 := AllSimplicialSurfacesOfDigraph(digraph,true);[127X[104X
    [4X[28X[ simplicial surface (4 vertices, 6 edges, and 4 faces) ][128X[104X
    [4X[25Xgap>[125X [27XIsIsomorphic(tet1[1],Tetrahedron());[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [33X[0;0YSo  the  only  vertex-faithful  simplicial  surface  of  the  digraph is the
  tetrahedron.   But  there  is  another  simplicial  surface,  which  is  not
  vertex-faithful:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xlist := AllSimplicialSurfacesOfDigraph(digraph,false);[127X[104X
    [4X[28X[ simplicial surface (4 vertices, 6 edges, and 4 faces), [128X[104X
    [4X[28Xsimplicial surface (3 vertices, 6 edges, and 4 faces)][128X[104X
    [4X[25Xgap>[125X [27Xtet2 := Filtered(list,IsVertexFaithful);[127X[104X
    [4X[28X[ simplicial surface (4 vertices, 6 edges, and 4 faces) ][128X[104X
    [4X[25Xgap>[125X [27XIsIsomorphic(tet2[1],Tetrahedron());[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [33X[0;0YSince  it  takes a long time to compute all cycles, you should only call the
  method  for digraphs with twelve or less nodes for [9Xvertexfaithful[109X false. For
  [9Xvertexfaithful[109X  true,  the  method  needs  to  consider  only  chordless and
  non-separating  cycles.  This  makes  the  method fast for digraphs up to 28
  nodes.  In  general,  it  is  much  faster  to only look for vertex-faithful
  simplicial surfaces.[133X
  
  
  [1X15.5 [33X[0;0YIsomorphism testing[133X[101X
  
  [33X[0;0YThe  twisted  polygonal  complexes  from Chapter [14X2[114X can be described by their
  chamber  adjacency  structure.  The  chamber adjacency can be modelled as an
  undirected,   edge-coloured   graph   (compare   Section  [14X15.3[114X).  Thus,  the
  isomorphism  problem  for  twisted  polygonal complexes reduces to the graph
  isomorphism problem.[133X
  
  [33X[0;0YThe   graph   isomorphism  problem  is  solved  by  [9XNauty/Bliss[109X,  using  the
  [5XGAP[105X-package [9XNautyTracesInterface[109X.[133X
  
  [1X15.5-1 IsIsomorphic[101X
  
  [33X[1;0Y[29X[2XIsIsomorphic[102X( [3Xcomplex1[103X, [3Xcomplex2[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Y[9Xtrue[109X or [9Xfalse[109X[133X
  
  [33X[0;0YReturn  whether  the  given twisted polygonal complexes are isomorphic, i.e.
  whether  their  chamber  adjacency  graphs (compare [14X15.3[114X) are isomorphic. If
  both   twisted   polygonal  complexes  are  polygonal  complexes,  this  can
  equivalently  be  described  as  isomorphism  between their incidence graphs
  (compare [14X15.2[114X).[133X
  
  [33X[0;0YThe isomorphism check needs the package [9XNautyTracesInterface[109X to work.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XIsIsomorphic( Cube(), Octahedron() );[127X[104X
    [4X[28Xfalse[128X[104X
  [4X[32X[104X
  
  [1X15.5-2 IsomorphismRepresentatives[101X
  
  [33X[1;0Y[29X[2XIsomorphismRepresentatives[102X( [3XcomplexList[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ya list of twisted polygonal complexes[133X
  
  [33X[0;0YThe  method  [9XIsomorphismRepresentatives[109X  takes  a  list of twisted polygonal
  complexes and returns a reduced list in which no two entries are isomorphic.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XcomplexList := [ Cube(), JanusHead(), Cube(), Cube() ];;[127X[104X
    [4X[25Xgap>[125X [27XSize(complexList);[127X[104X
    [4X[28X4[128X[104X
    [4X[25Xgap>[125X [27XrepList := IsomorphismRepresentatives(complexList);;[127X[104X
    [4X[25Xgap>[125X [27XSize(repList);[127X[104X
    [4X[28X2[128X[104X
    [4X[25Xgap>[125X [27XCube() in repList;[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XJanusHead() in repList;[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [33X[0;0YIn  many  cases it is enough to know whether two twisted polygonal complexes
  are  isomorphic. In some cases it is useful to know the concrete isomorphism
  between  them. TODO can something be done about this? Currently the returned
  isomorphism  does  not  match  the  labels  (and  group  actions are hard to
  define);[133X
  
  [1X15.5-3 CanonicalRepresentativeOfPolygonalSurface[101X
  
  [33X[1;0Y[29X[2XCanonicalRepresentativeOfPolygonalSurface[102X( [3Xsurface[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10YA  list  containing  the  canonical  form  of  the  surface  and a
            polygonal  morphism  from  the  canonical  surface to the original
            surface[133X
  
  [33X[0;0YFind the canonical representative of a polygonal surface, i.e. an isomorphic
  surface with the following properties:[133X
  
  [30X    [33X[0;6YThe  vertices  are  numbered  consecutively  from  1  to the number of
        vertices (and similarly for edges and faces)[133X
  
  [30X    [33X[0;6YFor any isomorphic surface, the same unique representative is returned
        in each case.[133X
  
  [33X[0;0YAlso  provides  a  polygonal morphism (compare chapter [14X7[114X) from the canonical
  surface  to  the original surface. The following example illustrates the use
  of  the  [9XCanonicalRepresentativeOfPolygonalSurface[109X  command.  We  define the
  cube,   but   with   a   labelling   of   larger  than  necessary  integers.
  [9XCanonicalRepresentativeOfPolygonalSurface[109X  is  then  used to return both the
  canonical  representative  of the cube and the maps between the cube and its
  canonical  representative.  The  faces, edges and vertices are displayed and
  are  clearly  now  lex  least in their ordering. Some checks reveal that the
  cube  is  not  identical  to  its  canonical  representative,  it is however
  isomorphic,  and mapping the canonical representative under its preimage map
  returns the cube again.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xfaces := [ 20, 21, 22, 23, 24, 25 ];;[127X[104X
    [4X[25Xgap>[125X [27Xedges := [ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 ];;[127X[104X
    [4X[25Xgap>[125X [27Xvertices := [ 12, 13, 14, 15, 16, 17, 18, 19 ];;[127X[104X
    [4X[25Xgap>[125X [27XedgesOfFaces := [ ,,,,,,,,,,,,,,,,,,, [ 4, 5, 6, 7 ], [ 4, 8, 11, 15 ], [127X[104X
    [4X[25X>[125X [27X       [ 5, 8, 9, 12 ], [ 7, 10, 11, 14 ], [ 6, 9, 10, 13 ],[127X[104X
    [4X[25X>[125X [27X       [ 12, 13, 14, 15 ] ];;[127X[104X
    [4X[25Xgap>[125X [27XverticesOfEdges := [ ,,, [ 12, 13 ], [ 13, 14 ], [ 14, 15 ], [ 12, 15 ], [127X[104X
    [4X[25X>[125X [27X       [ 13, 17 ], [ 14, 18 ], [ 15, 19 ], [ 12, 16 ], [ 17, 18 ], [ 18, 19 ], [127X[104X
    [4X[25X>[125X [27X       [ 16, 19 ], [ 16, 17 ] ];;[127X[104X
    [4X[25Xgap>[125X [27Xcube := PolygonalSurfaceByDownwardIncidence(vertices, edges, faces, [127X[104X
    [4X[25X>[125X [27X       verticesOfEdges, edgesOfFaces);;[127X[104X
    [4X[25Xgap>[125X [27XcanonicalCube:=CanonicalRepresentativeOfPolygonalSurface(cube);;[127X[104X
    [4X[25Xgap>[125X [27Xcanon:=canonicalCube[1];;[127X[104X
    [4X[25Xgap>[125X [27XFaces(canon);[127X[104X
    [4X[28X[ 1 .. 6 ][128X[104X
    [4X[25Xgap>[125X [27XEdges(canon);[127X[104X
    [4X[28X[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ][128X[104X
    [4X[25Xgap>[125X [27XVertices(canon);[127X[104X
    [4X[28X[ 1, 2, 3, 4, 5, 6, 7, 8 ][128X[104X
    [4X[25Xgap>[125X [27XEdgesOfFaces(canon);[127X[104X
    [4X[28X[ [ 1, 2, 3, 4 ], [ 5, 6, 7, 8 ], [ 1, 5, 9, 10 ], [ 3, 7, 9, 11 ], [128X[104X
    [4X[28X[ 4, 8, 10, 12 ], [ 2, 6, 11, 12 ] ][128X[104X
    [4X[25Xgap>[125X [27XVerticesOfEdges(canon);[127X[104X
    [4X[28X[ [ 1, 2 ], [ 3, 4 ], [ 1, 3 ], [ 2, 4 ], [ 5, 6 ], [ 7, 8 ], [ 5, 7 ], [ 6, 8 ], [128X[104X
    [4X[28X[ 1, 5 ], [ 2, 6 ], [ 3, 7 ], [ 4, 8 ] ][128X[104X
    [4X[25Xgap>[125X [27Xcanon=cube;[127X[104X
    [4X[28Xfalse[128X[104X
    [4X[25Xgap>[125X [27XIsIsomorphic(cube, canon);[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27Xoriginal := RangeSurface(canonicalCube[2]);;[127X[104X
    [4X[25Xgap>[125X [27Xoriginal=cube;[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  
  [1X15.6 [33X[0;0YAutomorphism groups of polygonal complexes[133X[101X
  
  [33X[0;0YThis  section  explains  how  to  compute  automorphism  groups  of  twisted
  polygonal  complexes. Since this computation relies on the chamber adjacency
  graph  (compare  Section  [14X15.3[114X),  the package [9XNautyTracesInterface[109X has to be
  available.[133X
  
  [33X[0;0YWorking  with  the  automorphism group of a polygonal complex is complicated
  since any automorphism acts on vertices, edges, and faces simultaneously. In
  general  it is not possible to define an automorphism by defining it just on
  the  vertices (or edges, or faces). Whenever this is possible, the situation
  becomes  much  easier.  This happens for example with the tetrahedron: Image
  omitted in terminal text[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xtetra := Tetrahedron();;[127X[104X
    [4X[25Xgap>[125X [27XIsAutomorphismDefinedByFaces(tetra);[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XAutomorphismGroupOnFaces(tetra);[127X[104X
    [4X[28XGroup([ (1,2), (2,4), (3,4) ])[128X[104X
  [4X[32X[104X
  
  [33X[0;0YFor the janus-head this is not possible. Image omitted in terminal text[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xjanus := JanusHead();;[127X[104X
    [4X[25Xgap>[125X [27XIsAutomorphismDefinedByVertices(janus);[127X[104X
    [4X[28Xfalse[128X[104X
    [4X[25Xgap>[125X [27XIsAutomorphismDefinedByEdges(janus);[127X[104X
    [4X[28Xfalse[128X[104X
    [4X[25Xgap>[125X [27XIsAutomorphismDefinedByFaces(janus);[127X[104X
    [4X[28Xfalse[128X[104X
  [4X[32X[104X
  
  [33X[0;0YTherefore,  general automorphisms are not given by their action on vertices,
  edges,  or  faces.  However, each automorphism is determined uniquely by its
  action on the chambers of a twisted polygonal complex. Any polygonal complex
  can be interpreted as a twisted polygonal complex, as shown in Section [14X5.4[114X.[133X
  
  [33X[0;0YImage omitted in terminal text[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XAutomorphismGroup(tetra);[127X[104X
    [4X[28XGroup([ [128X[104X
    [4X[28X  (1,2)(3,5)(4,6)(7,8)(9,11)(10,12)(13,19)(14,20)(15,21)(16,22)(17,23)(18,24), [128X[104X
    [4X[28X  (1,3)(2,4)(5,6)(7,13)(8,14)(9,15)(10,16)(11,18)(12,17)(19,20)(21,24)(22,23), [128X[104X
    [4X[28X  (1,7)(2,8)(3,9)(4,10)(5,11)(6,12)(13,15)(14,16)(17,18)(19,21)(20,22)(23,24) ])[128X[104X
    [4X[25Xgap>[125X [27XSize(last);[127X[104X
    [4X[28X24[128X[104X
    [4X[25Xgap>[125X [27XAutomorphismGroup(janus);[127X[104X
    [4X[28XGroup([ (1,2)(3,4)(5,6)(7,8)(9,10)(11,12), (1,3)(2,4)(5,9)(6,10)(7,11)(8,12), [128X[104X
    [4X[28X   (1,5)(2,6)(3,7)(4,8)(9,11)(10,12) ])[128X[104X
    [4X[25Xgap>[125X [27XSize( last );[127X[104X
    [4X[28X12[128X[104X
  [4X[32X[104X
  
  [33X[0;0YUnfortunately,   this   makes   it   more   complicated  to  understand  the
  automorphisms  at  a glance. To see the individual action on vertices, edges
  and faces, the method [9XDisplayAsAutomorphism[109X ([14X15.6-2[114X) can be used.[133X
  
  [33X[0;0YFor  example,  the first generator of the tetrahedron automorphism group can
  be displayed like this:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XDisplayAsAutomorphism( tetra, [127X[104X
    [4X[25X>[125X [27X (1,2)(3,5)(4,6)(7,8)(9,11)(10,12)(13,19)(14,20)(15,21)(16,22)(17,23)(18,24));[127X[104X
    [4X[28X[ (3,4), (2,3)(4,5), (1,2) ][128X[104X
  [4X[32X[104X
  
  [33X[0;0YThe  first  component  describes  the  action  on  the  vertices, the second
  component  shows  the action on the edges and the final component represents
  the action on the faces.[133X
  
  [33X[0;0YOften,  it  can be avoided to calculate with such a big group representation
  since the automorphisms are usually determined by vertices, edges, or faces.
  For example, consider the open bag. Image omitted in terminal text[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XopenBag := SimplicialSurfaceByDownwardIncidence([127X[104X
    [4X[25X>[125X [27X       [[1,2],[1,3],[2,3],[2,3]], [[1,2,4],[1,2,3]]);;[127X[104X
    [4X[25Xgap>[125X [27XIsAutomorphismDefinedByVertices(openBag);[127X[104X
    [4X[28Xfalse[128X[104X
    [4X[25Xgap>[125X [27XIsAutomorphismDefinedByEdges(openBag);[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XIsAutomorphismDefinedByFaces(openBag);[127X[104X
    [4X[28Xfalse[128X[104X
  [4X[32X[104X
  
  [33X[0;0YTherefore,  the  automorphism group is best represented by its action on the
  edges.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XAutomorphismGroupOnEdges(openBag);[127X[104X
    [4X[28XGroup([ (3,4), (1,2) ])[128X[104X
  [4X[32X[104X
  
  [1X15.6-1 AutomorphismGroup[101X
  
  [33X[1;0Y[29X[2XAutomorphismGroup[102X( [3Xcomplex[103X ) [32X attribute[133X
  [6XReturns:[106X  [33X[0;10Ya permutation group[133X
  
  [33X[0;0YCompute the automorphism group of the twisted polygonal complex [3Xcomplex[103X as a
  permutation  group  on the chambers of [3Xcomplex[103X. For an introduction into the
  usage     and     conventions     of     automorphism    groups    in    the
  [9XSimplicialSurface[109X-package, compare the start of section [14X15.6[114X.[133X
  
  [33X[0;0YFor the tetrahedron this gives the following result:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xtetra := Tetrahedron();;[127X[104X
    [4X[25Xgap>[125X [27XVertices(tetra);[127X[104X
    [4X[28X[ 1, 2, 3, 4 ][128X[104X
    [4X[25Xgap>[125X [27XEdges(tetra);[127X[104X
    [4X[28X[ 1, 2, 3, 4, 5, 6 ][128X[104X
    [4X[25Xgap>[125X [27XFaces(tetra);[127X[104X
    [4X[28X[ 1 .. 4 ][128X[104X
    [4X[25Xgap>[125X [27XChambers(tetra);[127X[104X
    [4X[28X[ 1 .. 24 ][128X[104X
    [4X[25Xgap>[125X [27Xaut := AutomorphismGroup(tetra);[127X[104X
    [4X[28XGroup([ [128X[104X
    [4X[28X  (1,2)(3,5)(4,6)(7,8)(9,11)(10,12)(13,19)(14,20)(15,21)(16,22)(17,23)(18,24), [128X[104X
    [4X[28X  (1,3)(2,4)(5,6)(7,13)(8,14)(9,15)(10,16)(11,18)(12,17)(19,20)(21,24)(22,23), [128X[104X
    [4X[28X  (1,7)(2,8)(3,9)(4,10)(5,11)(6,12)(13,15)(14,16)(17,18)(19,21)(20,22)(23,24) ])[128X[104X
  [4X[32X[104X
  
  [33X[0;0YImage omitted in terminal text[133X
  
  [33X[0;0YTo  see  the  action  on  vertices, edges, and faces simultaneously, use the
  method [9XDisplayAsAutomorphism[109X ([14X15.6-2[114X).[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XDisplayAsAutomorphism( tetra, aut.1 );[127X[104X
    [4X[28X[ (3,4), (2,3)(4,5), (1,2) ][128X[104X
    [4X[25Xgap>[125X [27XDisplayAsAutomorphism( tetra, aut.2 );[127X[104X
    [4X[28X[ (2,3), (1,2)(5,6), (2,4) ][128X[104X
    [4X[25Xgap>[125X [27XDisplayAsAutomorphism( tetra, aut.3 );[127X[104X
    [4X[28X[ (1,2), (2,4)(3,5), (3,4) ][128X[104X
  [4X[32X[104X
  
  [33X[0;0YTo  compute  the  action  on  vertices, edges or faces individually, use the
  methods   [9XAutomorphismGroupOnVertices[109X   ([14X15.6-3[114X),   [9XAutomorphismGroupOnEdges[109X
  ([14X15.6-4[114X) or [9XAutomorphismGroupOnFaces[109X ([14X15.6-5[114X).[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XAutomorphismGroupOnVertices(tetra);[127X[104X
    [4X[28XGroup([ (3,4), (2,3), (1,2) ])[128X[104X
    [4X[25Xgap>[125X [27XAutomorphismGroupOnEdges(tetra);[127X[104X
    [4X[28XGroup([ (2,3)(4,5), (1,2)(5,6), (2,4)(3,5) ])[128X[104X
    [4X[25Xgap>[125X [27XAutomorphismGroupOnFaces(tetra);[127X[104X
    [4X[28XGroup([ (1,2), (2,4), (3,4) ])[128X[104X
  [4X[32X[104X
  
  [33X[0;0YFor example, the automorphism group of an icosahedron ([14X14.3-6[114X) is the direct
  product of a cyclic group of order 2 and an alternating group of order 60.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XautIco := AutomorphismGroup( Icosahedron() );;[127X[104X
    [4X[25Xgap>[125X [27XSize(autIco);[127X[104X
    [4X[28X120[128X[104X
    [4X[25Xgap>[125X [27XStructureDescription(autIco);[127X[104X
    [4X[28X"C2 x A5"[128X[104X
  [4X[32X[104X
  
  [1X15.6-2 DisplayAsAutomorphism[101X
  
  [33X[1;0Y[29X[2XDisplayAsAutomorphism[102X( [3Xcomplex[103X, [3Xperm[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10YA list of three permutations[133X
  
  [33X[0;0YDisplay  an  automorphism  of  the given [3Xcomplex[103X by its individual action on
  vertices, edges, and faces.[133X
  
  [33X[0;0YAn explanation for the necessity of this method is given in section [14X15.6[114X.[133X
  
  [33X[0;0YWe  illustrate  this  on  the  example  of  a  tetrahedron. Image omitted in
  terminal text[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xtetra := Tetrahedron();;[127X[104X
    [4X[25Xgap>[125X [27Xaut := AutomorphismGroup( tetra );[127X[104X
    [4X[28XGroup([ [128X[104X
    [4X[28X  (1,2)(3,5)(4,6)(7,8)(9,11)(10,12)(13,19)(14,20)(15,21)(16,22)(17,23)(18,24), [128X[104X
    [4X[28X  (1,3)(2,4)(5,6)(7,13)(8,14)(9,15)(10,16)(11,18)(12,17)(19,20)(21,24)(22,23), [128X[104X
    [4X[28X  (1,7)(2,8)(3,9)(4,10)(5,11)(6,12)(13,15)(14,16)(17,18)(19,21)(20,22)(23,24) ])[128X[104X
    [4X[25Xgap>[125X [27XDisplayAsAutomorphism( tetra, aut.1 );[127X[104X
    [4X[28X[ (3,4), (2,3)(4,5), (1,2) ][128X[104X
    [4X[25Xgap>[125X [27XDisplayAsAutomorphism( tetra, aut.2 );[127X[104X
    [4X[28X[ (2,3), (1,2)(5,6), (2,4) ][128X[104X
    [4X[25Xgap>[125X [27XDisplayAsAutomorphism( tetra, aut.3 );[127X[104X
    [4X[28X[ (1,2), (2,4)(3,5), (3,4) ][128X[104X
    [4X[25Xgap>[125X [27XDisplayAsAutomorphism( tetra, aut.1 );[127X[104X
    [4X[28X[ (3,4), (2,3)(4,5), (1,2) ][128X[104X
  [4X[32X[104X
  
  [1X15.6-3 AutomorphismGroupOnVertices[101X
  
  [33X[1;0Y[29X[2XAutomorphismGroupOnVertices[102X( [3Xcomplex[103X ) [32X attribute[133X
  [33X[1;0Y[29X[2XIsAutomorphismDefinedByVertices[102X( [3Xcomplex[103X ) [32X property[133X
  [6XReturns:[106X  [33X[0;10Ya permutation group[133X
  
  [33X[0;0YThe   method   [9XAutomorphismGroupOnVertices[109X   returns   the   action  of  the
  automorphism     group     of     [3Xcomplex[103X     on     its     vertices.    If
  [9XIsAutomorphismDefinedByVertices[109X([3Xcomplex[103X)  is [9Xtrue[109X, this is isomorphic to the
  full automorphism group.[133X
  
  [33X[0;0YFor the cube ([14X14.3-3[114X) we get: Image omitted in terminal text[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xcube := Cube();;[127X[104X
    [4X[25Xgap>[125X [27XIsAutomorphismDefinedByVertices(cube);[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XAutomorphismGroupOnVertices(cube);[127X[104X
    [4X[28XGroup([ (3,6)(4,5), (2,4)(6,8), (1,2)(3,4)(5,6)(7,8) ])[128X[104X
  [4X[32X[104X
  
  [1X15.6-4 AutomorphismGroupOnEdges[101X
  
  [33X[1;0Y[29X[2XAutomorphismGroupOnEdges[102X( [3Xcomplex[103X ) [32X attribute[133X
  [33X[1;0Y[29X[2XIsAutomorphismDefinedByEdges[102X( [3Xcomplex[103X ) [32X property[133X
  [6XReturns:[106X  [33X[0;10Ya permutation group[133X
  
  [33X[0;0YThe  method  [9XAutomorphismGroupOnEdges[109X returns the action of the automorphism
  group  of  [3Xcomplex[103X on its edges. If [9XIsAutomorphismDefinedByEdges[109X([3Xcomplex[103X) is
  [9Xtrue[109X, this is isomorphic to the full automorphism group.[133X
  
  [33X[0;0YFor the cube ([14X14.3-3[114X) we get: Image omitted in terminal text[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xcube := Cube();;[127X[104X
    [4X[25Xgap>[125X [27XIsAutomorphismDefinedByEdges(cube);[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XAutomorphismGroupOnEdges(cube);[127X[104X
    [4X[28XGroup([ (2,5)(3,12)(4,8)(6,9)(7,11), (1,4)(2,3)(5,7)(9,10)(11,12), [128X[104X
    [4X[28X   (2,4)(5,8)(6,7)(9,11) ])[128X[104X
  [4X[32X[104X
  
  [1X15.6-5 AutomorphismGroupOnFaces[101X
  
  [33X[1;0Y[29X[2XAutomorphismGroupOnFaces[102X( [3Xcomplex[103X ) [32X attribute[133X
  [33X[1;0Y[29X[2XIsAutomorphismDefinedByFaces[102X( [3Xcomplex[103X ) [32X property[133X
  [6XReturns:[106X  [33X[0;10Ya permutation group[133X
  
  [33X[0;0YThe  method  [9XAutomorphismGroupOnFaces[109X returns the action of the automorphism
  group  of  [3Xcomplex[103X on its faces. If [9XIsAutomorphismDefinedByFaces[109X([3Xcomplex[103X) is
  [9Xtrue[109X, this is isomorphic to the full automorphism group.[133X
  
  [33X[0;0YFor the cube ([14X14.3-3[114X) we get: Image omitted in terminal text[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xcube := Cube();;[127X[104X
    [4X[25Xgap>[125X [27XIsAutomorphismDefinedByFaces(cube);[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XAutomorphismGroupOnFaces(cube);[127X[104X
    [4X[28XGroup([ (1,2)(5,6), (2,4)(3,5), (3,4) ])[128X[104X
  [4X[32X[104X
  
  
  [1X15.7 [33X[0;0YAction on paths[133X[101X
  
  [33X[0;0YIn section [14X15.6[114X the action of the automorphism group on vertices, edges, and
  faces  was  defined. Since these actions are given as permutations, they can
  be efficiently computed in GAP. Nevertheless, it is sometimes convenient (if
  slower) to act on some composite objects (like [9XVertexEdgePaths[109X) directly.[133X
  
  [1X15.7-1 OnVertexEdgePaths[101X
  
  [33X[1;0Y[29X[2XOnVertexEdgePaths[102X( [3XvePath[103X, [3Xaut[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ya vertex-edge-path[133X
  
  [33X[0;0YApply  the  automorphism  [3Xaut[103X  to  the  vertex-edge-path  [3XvePath[103X  (for their
  definition  consult  section  [14X8.1[114X).  Currently  this  is only implemented if
  [3XvePath[103X is defined on a polygonal complex.[133X
  
  [33X[0;0YThe   automorphism  should  be  given  in  the  form  that  is  returned  by
  [9XAutomorphismGroup[109X  ([14X15.6-1[114X).  If  the given automorphism is not well-defined
  for  the given [3XvePath[103X (as checked by [9XDisplayAsAutomorphism[109X, [14X15.6-2[114X), [9Xfail[109X is
  returned.[133X
  
  [33X[0;0YAs an example, we consider the octahedron.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xoct := Octahedron();;[127X[104X
  [4X[32X[104X
  
  [33X[0;0YImage omitted in terminal text[133X
  
  [33X[0;0YWe compute all duplicate-free vertex-edge-paths of length 2.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xpaths := [];[127X[104X
    [4X[28X[][128X[104X
    [4X[25Xgap>[125X [27Xfor v in Vertices(oct) do[127X[104X
    [4X[25X>[125X [27X       for edgePair in Arrangements( EdgesOfVertex(oct,v), 2 ) do[127X[104X
    [4X[25X>[125X [27X           Add( paths, VertexEdgePathByEdges(oct, edgePair) );[127X[104X
    [4X[25X>[125X [27X       od;[127X[104X
    [4X[25X>[125X [27X   od;[127X[104X
    [4X[25Xgap>[125X [27XLength(paths);[127X[104X
    [4X[28X72[128X[104X
  [4X[32X[104X
  
  [33X[0;0YThe  automorphism  group has exactly two orbits on this set of paths (either
  the two edges belong to one triangle, or they don't).[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XautOct := AutomorphismGroup(oct);;[127X[104X
    [4X[25Xgap>[125X [27XpathOrbits := Orbits(autOct, paths, OnVertexEdgePaths);;[127X[104X
    [4X[25Xgap>[125X [27XLength(pathOrbits);[127X[104X
    [4X[28X2[128X[104X
    [4X[25Xgap>[125X [27XpathOrbits[1][1];[127X[104X
    [4X[28X| v2, E1, v1, E2, v3 |[128X[104X
    [4X[25Xgap>[125X [27XpathOrbits[2][1];[127X[104X
    [4X[28X| v2, E1, v1, E3, v4 |[128X[104X
    [4X[25Xgap>[125X [27XList( pathOrbits, Length );[127X[104X
    [4X[28X[ 48, 24 ][128X[104X
  [4X[32X[104X
  
  [1X15.7-2 OnEdgeFacePaths[101X
  
  [33X[1;0Y[29X[2XOnEdgeFacePaths[102X( [3XefPath[103X, [3Xaut[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Yan edge-face-path[133X
  
  [33X[0;0YApply   the  automorphism  [3Xaut[103X  to  the  edge-face-path  [3XefPath[103X  (for  their
  definition  consult  section  [14X8.3[114X).  Currently  this  is only implemented if
  [3XefPath[103X is defined on a polygonal complex.[133X
  
  [33X[0;0YThe   automorphism  should  be  given  in  the  form  that  is  returned  by
  [9XAutomorphismGroup[109X  ([14X15.6-1[114X).  If  the given automorphism is not well-defined
  for  the given [3XvePath[103X (as checked by [9XDisplayAsAutomorphism[109X, [14X15.6-2[114X), [9Xfail[109X is
  returned.[133X
  
  [33X[0;0YAs an example, we consider the octahedron.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xoct := Octahedron();;[127X[104X
  [4X[32X[104X
  
  [33X[0;0YImage omitted in terminal text[133X
  
  [33X[0;0YWe compute all duplicate-free edge-face-paths of length 2.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xpaths := [];[127X[104X
    [4X[28X[][128X[104X
    [4X[25Xgap>[125X [27Xfor f in Faces(oct) do[127X[104X
    [4X[25X>[125X [27X       for pair in Arrangements( EdgesOfFace(oct, f), 2 ) do[127X[104X
    [4X[25X>[125X [27X           sndFace := NeighbourFaceByEdge(oct, f, pair[2]);[127X[104X
    [4X[25X>[125X [27X           otherEdges := Difference( EdgesOfFace(oct, sndFace), [pair[2]] );[127X[104X
    [4X[25X>[125X [27X           for finalEdge in otherEdges do[127X[104X
    [4X[25X>[125X [27X               Add(paths, [127X[104X
    [4X[25X>[125X [27X                   EdgeFacePath(oct, [pair[1],f,pair[2],sndFace, finalEdge]));[127X[104X
    [4X[25X>[125X [27X           od;[127X[104X
    [4X[25X>[125X [27X       od;[127X[104X
    [4X[25X>[125X [27X   od;[127X[104X
    [4X[25Xgap>[125X [27XLength(paths);[127X[104X
    [4X[28X96[128X[104X
  [4X[32X[104X
  
  [33X[0;0YThe automorphism group has exactly two orbits on this set of paths.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XautOct := AutomorphismGroup(oct);;[127X[104X
    [4X[25Xgap>[125X [27XpathOrbits := Orbits(autOct, paths, OnEdgeFacePaths);;[127X[104X
    [4X[25Xgap>[125X [27XLength(pathOrbits);[127X[104X
    [4X[28X2[128X[104X
    [4X[25Xgap>[125X [27XpathOrbits[1][1];[127X[104X
    [4X[28X| e1, F1, e2, F7, e3 |[128X[104X
    [4X[25Xgap>[125X [27XpathOrbits[2][1];[127X[104X
    [4X[28X| e1, F1, e2, F7, e8 |[128X[104X
    [4X[25Xgap>[125X [27XList( pathOrbits, Length );[127X[104X
    [4X[28X[ 48, 48 ][128X[104X
  [4X[32X[104X
  
