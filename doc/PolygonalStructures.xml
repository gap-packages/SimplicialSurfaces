<?xml version="1.0" encoding="UTF-8"?>

<!-- TODO insert stuff about VEFComplex and BendPolygonalComplex -->

<!-- This chapter is technical but very important for the rest of the package.
     Especially the definition of polygonal complex is essential (since most
     operations refer to it in one way or another). Therefore it has to explained
     quite early (for people who read a manual in order).
     Since we don't want to bore readers, we aim for an engagingly written
     chapter with many pictures to easily visualize what is going on. -->
<Chapter Label="PolygonalStructures"><Heading>Polygonal Structures</Heading>
    This chapter presents the different ways in which surfaces are used
    in the <K>SimplicialSurfaces</K>-package. More accurately, it presents 
    structures
    that are build from polygons (note that these can be much more general
    than simplicial surfaces). We employ two different models for
    these structures:
    <Enum>
        <Item>Description by incidence geometry. This leads to the concept
            of <K>PolygonalComplex</K> 
            (section <Ref Sect="PolygonalStructures_complex"/>). The 
            requirements for these
            to be surfaces are explained in section
            <Ref Sect="PolygonalStructures_surface"/>.</Item>
        <Item>If incidence geometry is not sufficient to describe a polygonal
            structure, additional information (a barycentric subdivision of 
            the faces) can be
            used. This leads to the concept of <K>TwistedPolygonalComplex</K>
            (section <Ref Sect="PolygonalStructures_twisted"/>). 
            </Item>
    </Enum>
    <E>Polygonal Complexes</E> are structures that are build from polygons, 
    like shown in the following figure (for the precise definition, see
    section <Ref Sect="PolygonalStructures_complex"/>).

    <Alt Only="HTML">
    &lt;br>&lt;img src="./images/_Wrapper_Image_ManyExamples.svg"> &lt;/img> &lt;br>
    </Alt>
    <Alt Only = "LaTeX">
    \begin{center}
\includegraphics{images/_Wrapper_Image_ManyExamples.pdf}
\end{center}
    </Alt>
    <Alt Only = "Text">
    Image omitted in terminal text
    </Alt>
    Surfaces are a special case of polygonal complexes and the package 
    provides functionality to determine whether a polygonal complex is
    a surface.
    <!-- There is no example of a twisted polygonal complex here as it seems
         not necessary to burden the reader with it. If someone needs a
         more general structure, we have told him before where he might find
         it. For all others it would be a needless distraction. -->

    <Section Label="PolygonalStructures_complex">
        <Heading>Polygonal Complexes (pure incidence geometry)</Heading>
        A polygonal complex is defined by a two-dimensional incidence geometry
        that fulfills some regularity conditions (the complete definition will
        be given at the end of this section in definition 
        <Ref Subsect="Def_PolygonalComplex"/>). We will exemplify this by 
        the following surface.
        <Alt Only="HTML">
        &lt;br>&lt;img src='./images/_Wrapper_structs-1-1.svg'> &lt;/img> &lt;br>
        </Alt>
        <Alt Only = "LaTeX">
        \begin{center}
        \includegraphics{images/_Wrapper_structs-1.pdf}
        \end{center}
        </Alt>
        <Alt Only = "Text">
        Image omitted in terminal text
        </Alt>
        In a two-dimensional incidence geometry we have a set <M>V</M> of
        vertices, a set <M>E</M> of edges and a set <M>F</M> of faces. If we label
        our surface like this,
        <!-- The choice to make the labelling disjoint and non-consecutive is
             deliberate: It shows that the labelling may contain holes and it
             makes it easier to distinguish between vertices and edges.
             Downside: It might give the impression that these numbers have to
             be disjoint. While this is a serious concern, we feel that it is
             counteracted by enough contrary examples in the manual. -->
        <Alt Only="HTML">
        &lt;br>&lt;img src="./images/_Wrapper_Image_StarOfStarExample.svg"> &lt;/img> &lt;br>
        </Alt>
        <Alt Only = "LaTeX">
        \begin{center}
\includegraphics{images/_Wrapper_Image_StarOfStarExample.pdf}
\end{center}
        </Alt>
        <Alt Only = "Text">
        Image omitted in terminal text
        </Alt>
        we have the sets
        <Par/>
        <M>V = \{2, 3, 5, 7, 11\}</M>
        <Par/>
        <M>E = \{6, 8, 9, 10, 12, 13\}</M>
        <Par/>
        <M>F = \{I, IV\}</M>.
        <Par/>
        These sets can't encode the surface on their own. The 
        relations between vertices, edges, and faces are also necessary. 
        Therefore we define a 
        transitive relation in the union of <M>V \times E</M>, 
        <M>V \times F</M>, and <M>E \times F</M>, where <M>(a,b)</M> is in the 
        relation if and only if <M>a</M> is incident to <M>b</M>.
        Since the relation is transitive, it is sufficient to specify the 
        tuples in <M>V \times E</M> and <M>E \times F</M>. In our example the 
        relation is generated by
        <Par/>
        <M>\{ (2,6), (2,8), (3,8), (3,9), (3,12), (5,6), (5,9), (5,10), (7,12), 
            (7,13), (11,10), (11,13)\}</M>
        <Par/>
        and
        <Par/>
        <M>\{ (6,I), (8,I), (9,I), (9,IV), (10,IV), (12,IV), (13,IV) \}</M>.
        <Par/>
        <!-- TODO add "subset VxE" to those? Is that possible? -->


        However, we do not permit arbitrary incidence relations but only
        those satisfying certain regularity conditions (like in our example).
        For
        example, every edge should consist of exactly two vertices (more
        formally, for every edge there should be exactly two vertices that
        are incident to it).
        <Alt Only="HTML">
        &lt;br>&lt;img src='./images/_Wrapper_structs-2-1.svg'> &lt;/img> &lt;br>
        </Alt>
        <Alt Only = "LaTeX">
        \begin{center}
        \includegraphics{images/_Wrapper_structs-2.pdf}
        \end{center}
        </Alt>
        <Alt Only = "Text">
        Image omitted in terminal text
        </Alt>
        If we try to generalize this condition to the faces we encounter
        some difficulties. For example, if we only enforce that each face
        has exactly three edges and three vertices, it would be possible
        that two of those edges share all of their vertices. Therefore
        even the case of triangles is quite complicated.
        <Alt Only="HTML">
        &lt;br>&lt;img src='./images/_Wrapper_structs-3-1.svg'> &lt;/img> &lt;br>
        </Alt>
        <Alt Only = "LaTeX">
        \begin{center}
        \includegraphics{images/_Wrapper_structs-3.pdf}
        \end{center}
        </Alt>
        <Alt Only = "Text">
        Image omitted in terminal text
        </Alt>
        We will solve this problem by imposing a cyclic ordering on the
        vertices and edges that are incident to each face, such that those
        are compatible with the incidence structure. Since this definition
        is equally valid for all polygons (not just triangles), we
        formally define:
        <Par/>

        <List>
            <Item><#Include Label="PolygonalComplex_Face"></Item>
        </List>

        <Alt Only="HTML">
        &lt;br>&lt;img src='./images/_Wrapper_structs-4-1.svg'> &lt;/img> &lt;br>
        </Alt>
        <Alt Only = "LaTeX">
        \begin{center}
        \includegraphics{images/_Wrapper_structs-4.pdf}
        \end{center}
        </Alt>
        <Alt Only = "Text">
        Image omitted in terminal text
        </Alt>

        With these conditions we have guaranteed that all edges and faces
        behave as in our previous example. But they still allow the possibility
        of an incidence relation where we have vertices but no faces. Since
        we want to exclude singular cases like this from our considerations, we
        require that every vertex is incident to at least one edge and that
        every edge is incident to at least one face.
        <Par/>

        <Subsection Label="Def_PolygonalComplex">
            <Heading>Definition (polygonal complex)</Heading>
            <#Include Label="PolygonalComplex_Definition">
        </Subsection>

        It is now easy to verify
        that the examples in the picture

        <Alt Only="HTML">
        &lt;br>&lt;img src="./images/_Wrapper_Image_ManyExamples.svg"> &lt;/img> &lt;br>
        </Alt>
        <Alt Only = "LaTeX">
        \begin{center}
\includegraphics{images/_Wrapper_Image_ManyExamples.pdf}
\end{center}
        </Alt>
        <Alt Only = "Text">
        Image omitted in terminal text
        </Alt>
        are all polygonal complexes.
        <Par/>


        <ManSection>
            <Prop Name="IsPolygonalComplex" Arg="object" Label="for IsObject"
                Comm="Checks whether the given object is a polygonal complex"/>
            <Returns><K>true</K> or <K>false</K></Returns>
            <Description>
                Checks whether <A>object</A> is a polygonal complex. A polygonal
                complex can be informally described as a structure that is
                constructed from polygons.
                <Par/>
                More formally (for a more extensive explanation see section 
                <Ref Sect="PolygonalStructures_complex"/>) a polygonal complex 
                is a two-dimensional incidence geometry of vertices, edges and 
                faces such that the following conditions hold:
                <Enum>
                    <Item><#Include Label="PolygonalComplex_Edge_simple"></Item>
                    <Item><#Include Label="PolygonalComplex_Face_simple"></Item>
                    <Item><#Include Label="PolygonalComplex_Incidence"></Item>
                </Enum>
            </Description>
        </ManSection>


    </Section>
<!-- TODO maybe talk about how to access this information with a link to the appropriate chapter? -->

    <Section Label="PolygonalStructures_twisted">
        <Heading>Twisted polygonal complexes and surfaces</Heading>
        While polygonal complexes are quite general, they can't describe all
        possible triangulations of a topological surface. For example, we
        can construct a torus from a single polygon by starting with a 
        square and identifying opposite edges.

        <Alt Only="HTML">
        &lt;br>&lt;img src='./images/_Wrapper_structs-5-1.svg'> &lt;/img> &lt;br>
        </Alt>
        <Alt Only = "LaTeX">
        \begin{center}
        \includegraphics{images/_Wrapper_structs-5.pdf}
        \end{center}
        </Alt>
        <Alt Only = "Text">
        Image omitted in terminal text
        </Alt>
        Since all vertices of the square collapse into a single vertex, it
        is impossible to describe this situation by a polygonal complex (as
        every edge needs to be incident to <E>exactly two</E> vertices).

        Structures like these appear naturally in several cases, for example.
        <List>
            <Item>Construction of surfaces from the coset action of a group.
                </Item>
            <Item>Construction of the geodesic dual.</Item>
        </List>
        <!-- TODO reference to location of these methods-->

        In these cases, the more general formalism of
        <E>twisted polygonal complexes</E> is helpful. To interpret the
        torus as a twisted polygonal complex, we subdivide it barycentrically.
        <Alt Only="HTML">
        &lt;br>&lt;img src='./images/_Wrapper_structs-6-1.svg'> &lt;/img> &lt;br>
        </Alt>
        <Alt Only = "LaTeX">
        \begin{center}
        \includegraphics{images/_Wrapper_structs-6.pdf}
        \end{center}
        </Alt>
        <Alt Only = "Text">
        Image omitted in terminal text
        </Alt>
        The small triangles within each face are called <E>chambers</E>.
        A twisted polygonal complex stores the incidences between vertices,
        edges, and faces (like a polygonal complex). In addition, it also
        stores a set of chambers, together with
        their adjacencies. Each chamber can be adjacent to another
        chamber along each of its edges.
        <List>
            <Item>Along the shortest edge, each chamber is adjacent to exactly
                one other chamber. We call these chambers <E>0-adjacent</E>.
                In the torus, the pairs are <M>(1,2)(3,4)(5,6)(7,8)</M>.</Item>
            <Item>Along the longest edge, each chamber is adjacent to exactly
                one other chamber. We call these chambers <E>1-adjacent</E>.
                In the torus, the pairs are <M>(1,8)(2,3)(4,5)(6,7)</M>.</Item>
            <Item>Along the middle edge, a chamber may be adjacent to
                any number of other chambers. All of them are 
                called <E>2-adjacent</E>. In the torus, each chamber
                is 2-adjacent to exactly one chamber. The pairs are
                <M>(1,6)(2,5)(3,8)(4,7)</M>.</Item>
        </List>

        Both 0-adjacency and 1-adjacency can be interpreted as involutions
        without fixed points (i.e. elements from the symmetric group on
        the chambers). The 2-adjacency can be represented by an equivalence
        relation on the chambers. Naturally, we cannot pick any involutions
        and equivalence relations:
        <List>
            <Item>Applying the 0-adjacency-involution does
                not change the edge and the face of a given chamber.</Item>
            <Item>Applying the 1-adjacency-involution does
                not change the vertex and the face of a given chamber.</Item>
            <Item>If two chambers are 2-adjacent, they have the same
                vertex and edge. Furthermore, applying the
                0-adjacency-involution to both produces 2-adjacent chambers.</Item>
            <Item>If two chambers have the same edge, they are either 2-adjacent
                or the first chamber is 2-adjacent to the chamber that arises from
                applying the 0-adjacency-involution to the second chamber.</Item>
            <Item>If two chambers have the same face, we can obtain the second
                chamber from the first chamber by repeatedly applying the
                0-adjacency-involution and 1-adjacency-involution.</Item>
        </List>

        <ManSection>
            <Prop Name="IsTwistedPolygonalComplex" Arg="object" 
                Label="for IsObject"
                Comm="Checks whether the given object is a twisted polygonal complex"/>
            <Returns><K>true</K> or <K>false</K></Returns>
            <Description>
                Checks whether <A>object</A> is a twisted polygonal complex.
                A twisted polygonal complex can be informally described
                as a structure that is constructed from polygons, where the
                polygons may be <E>twisted</E> (e.g. there could be a polygon
                with one vertex and three edges).

                More formally (for a more extensive explanation see Section
                <Ref Sect="PolygonalStructures_twisted"/>) a twisted polygonal
                complex is 
                
                TODO
            </Description>
        </ManSection>


        TODO explain how to work with it
    </Section>


    <Section Label="PolygonalStructures_surface">
        <Heading>Polygonal and simplicial surfaces</Heading>
        Polygonal surfaces are polygonal complexes (compare section 
        <Ref Sect="PolygonalStructures_complex"/>)
        that behave like surfaces (two-dimensional manifolds with boundary). 
        For example, they arise from the discretisation of a continuous 
        surface. Simplicial surfaces are polygonal surfaces, where all
        polygons are triangles.
        <Par/>
        There are two properties that distinguish polygonal surfaces
        from polygonal complexes:
        <Enum>
            <Item> There are no ramified edges, i.e. every edge is incident to
                at most two faces. This excludes cases like three triangles
                that share one edge.
                <Alt Only="HTML">
                &lt;br>&lt;img src='./images/_Wrapper_structs-7-1.svg'> &lt;/img> &lt;br>
                </Alt>
                <Alt Only = "LaTeX">
                \begin{center}
                \includegraphics{images/_Wrapper_structs-7.pdf}
                \end{center}
                </Alt>
                <Alt Only = "Text">
                Image omitted in terminal text
                </Alt>
            </Item>
            <Item> There are no ramified vertices. We will formalize this
                below but the aim of this condition is to exclude cases like 
                these:
                <Alt Only="HTML">
                &lt;br>&lt;img src="./images/_Wrapper_Image_RamifiedExamples.svg"> &lt;/img> &lt;br>
                </Alt>
                <Alt Only = "LaTeX">
                \begin{center}
\includegraphics{images/_Wrapper_Image_RamifiedExamples.pdf}
\end{center}
                </Alt>
                <Alt Only = "Text">
                Image omitted in terminal text
                </Alt>
            </Item>
        </Enum>
        If only the first condition is fulfilled, we have a <E>polygonal 
        complex without edge ramifications</E>.
         <ManSection Label="IsNotEdgeRamified">
            <Prop Name="IsNotEdgeRamified" Arg="complex" Label="for a TwistedPolygonalComplex"
                Comm="Checks whether the given twisted polygonal complex has no edge ramifications"/>
            <Returns><K>true</K> or <K>false</K></Returns>
            <Description>
                Checks whether the twisted polygonal complex <A>complex</A> has no edge
                ramifications.
                <P/>
                If <A>complex</A> is a polygonal complex, this means that
                every edge is incident to at most two faces.
                <P/>
                If <A>complex</A> is a twisted polygonal complex, this means that
                every chamber is 2-adjacent to at most one other chamber.
            </Description>
        </ManSection>

    
        We now proceed to formalize the second condition. Intuitively we want to
        distinguish between the different coloured faces in these examples:
        <Alt Only="HTML">
        &lt;br>&lt;img src='./images/_Wrapper_structs-8-1.svg'> &lt;/img> &lt;br>
        </Alt>
        <Alt Only = "LaTeX">
        \begin{center}
        \includegraphics{images/_Wrapper_structs-8.pdf}
        \end{center}
        </Alt>
        <Alt Only = "Text">
        Image omitted in terminal text
        </Alt>
        They can be distinguished by the fact that faces of the same colour are
        connected by edges that are incident to the given vertex. More formally:
        <Subsection Label="Definition_Umbrella">
            <Heading>Definition (Umbrella-path around a vertex)</Heading>
                <#Include Label="Umbrella_Definition">
                <Alt Only="HTML">
                &lt;br>&lt;img src="./images/_Wrapper_Image_EdgeFacePath.svg"> &lt;/img> &lt;br>
                </Alt>
                <Alt Only = "LaTeX">
                \begin{center}
\includegraphics{images/_Wrapper_Image_EdgeFacePath.pdf}
\end{center}
                </Alt>
                <Alt Only = "Text">
                Image omitted in terminal text
                </Alt>
        </Subsection>
        With this definition in mind we can explicate the second property:
        <List>
            <Item><#Include Label="PolygonalComplex_Paths"></Item>
        </List>
        For generic polygonal complexes without edge ramifications we 
        can't expect to get
        exactly one umbrella. In our examples above all incident edges
        and faces could be represented by two umbrellas.
        
        <ManSection>
            <Prop Name="IsNotVertexRamified" Arg="complex"
                Comm="Checks whether the given twisted polygonal complex has no vertex ramifications"/>
            <Returns><K>true</K> or <K>false</K></Returns>
            <Description>
                Checks whether the twisted polygonal complex <A>complex</A> has no vertex
                ramifications, i.e. that there is exactly one maximal umbrella
                for every vertex.
            </Description>
        </ManSection>



        In general, we can always find a set of umbrella of a vertex
        such that all edges and faces incident to that vertex lie in exactly
        one of those umbrellas. This is called the <E>umbrella partition</E>
        of the vertex (we will talk more about this topic in section
        <Ref Sect="Section_Access_OrderedVertexAccess"/>).
            
        <ManSection>
            <Prop Name="IsPolygonalSurface" Arg="object"
                Comm="Checks whether the given object is a polygonal surface."/>
            <Returns><K>true</K> or <K>false</K></Returns>
            <Description>
                Checks whether <A>object</A> (a polygonal complex) is a 
                polygonal surface. Informally
                a polygonal surface is a surface (with boundary) that is build
                only from polygons.
                <Par/>
                More formally (for more details and examples see sections
                <Ref Sect="PolygonalStructures_complex"/> and
                <Ref Sect="PolygonalStructures_surface"/>) a polygonal surface
                is a two-dimensional incidence geometry of vertices, edges, and
                faces such that the following conditions hold:
                <Enum>
                    <Item><#Include Label="PolygonalComplex_Edge_simple"></Item>
                    <Item><#Include Label="PolygonalComplex_Face_simple"></Item>
                    <Item><#Include Label="PolygonalComplex_Incidence"></Item>
                    <Item><#Include Label="PolygonalComplex_Ramified"></Item>
                    <Item><#Include Label="PolygonalComplex_Paths"></Item>
                </Enum>
            </Description>
        </ManSection>

        <ManSection>
            <Prop Name="IsSimplicialSurface" Arg="object"
                Comm="Checks whether the given object is a simplicial surface."/>
            <Returns><K>true</K> or <K>false</K></Returns>
            <Description>
                Checks whether <A>object</A> (a polygonal complex) is a 
                simplicial surface. 
                Informally a simplicial surface is a surface (with boundary)
                that is build only from triangles.
                <Par/>
                More formally (for more details and examples see sections
                <Ref Sect="PolygonalStructures_complex"/> and
                <Ref Sect="PolygonalStructures_surface"/>) a simplicial surface
                is a two-dimensional incidence geometry of vertices, edges, and
                faces such that the following conditions hold:
                <Enum>
                    <Item><#Include Label="PolygonalComplex_Edge_simple"></Item>
                    <Item><#Include Label="TriangularComplex_Face_simple"></Item>
                    <Item><#Include Label="PolygonalComplex_Incidence"></Item>
                    <Item><#Include Label="PolygonalComplex_Ramified"></Item>
                    <Item><#Include Label="PolygonalComplex_Paths"></Item>
                </Enum>
            </Description>
        </ManSection>

    </Section>

                                   
</Chapter> 
