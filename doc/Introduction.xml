<?xml version="1.0" encoding="UTF-8"?>

<!-- Goal of this chapter: Give people an introduction into the package,
     to get a feel of its functionalities, without bogging them down in
     details. The main concept we use here is that of an honest trade.

     We trade between complexity and depth. The complexity refers to the
     complexity of the explanation (is it intuitive/easy to understand or
     does it take a long time to wrap your head around it?). The depth
     refers to the depth of the taught concept (is it a simple concept? Is
     it generally useful or only a curiosity?).
     
     If the complexity cost is too high, people will probably get bored
     (since they don't see the point in continuing) and don't use the package.
     Therefore this chapter tries to strike a very good balance between
     complexity and depth. Every rise in complexity is rewarded with a 
     corresponding rise in depth. There is no long stretch of complexity 
     without an apparent goal.

     Ideally this teaches the reader (who probably reads this chapter first)
     that this manual will always try to strike a balance. So even if they
     later find a stretch of high complexity, they hopefully remember this
     lesson and give the manual the benefit of the doubt (to keep reading or
     at least to not discard it). -->
     
<Chapter Label="Introduction"><Heading>Getting started</Heading>
    <!-- This section is a teaser. Without going into details it gives a rough
         overview about what can be expected from this package. Therefore a
         reader can quickly determine if this package might be useful for them.

         Furthermore it tries to pique the interest of casual readers. If
         a casual reader is motivated to stay through the first few sections
         we can expect them to remember some of it - which might help them
         in the future, if they have a similar problem and need a package.

         Finally this section has to give something to those people that 
         already know what they want (otherwise they will start skipping ths
         introduction). For this reason this section is also used as an
         "overview"-section that gives an easy starting point for further
         inquiry. -->

        To use this package, it has to be loaded into GAP via
    <!--TODO Can you change the title of the box? "Example" sounds wrong-->
<Log>
gap&gt; LoadPackage("SimplicialSurfaces");
true
</Log>

    <Section Label="Introduction_Teaser"><Heading>What can it do?</Heading>
        The <K>SimplicialSurface</K>-package contains the following basic 
        functionality:
        <Enum>
            <Item>It allows computations with simplicial surfaces (and 
                generalisations of 
                them like polygonal complexes, compare section 
                <Ref Chap="PolygonalStructures"/>), for 
                example:
                <!-- TODO Alternative for text-version -->

                <Alt Only="HTML">
                &lt;br>&lt;img src="./images/_Wrapper_Image_ManyExamples.svg"> &lt;/img> &lt;br>
                </Alt>
                <Alt Only = "LaTeX">
                \begin{center}
                \includegraphics{images/_Wrapper_Image_ManyExamples.pdf}
                \end{center}
                </Alt>
                <Alt Only = "Text">
                Image omitted in terminal text
                </Alt>
                Instead of working with an embedding of these structures, we
                see them as abstract surfaces and represent them by their
                incidence geometry (for more details see section
                <Ref Sect="PolygonalStructures_complex"/>).
            </Item>
            <Item>It can work with edge colourings of simplicial surfaces
                (in general and for the purpose of an embedding). <!--TODO--></Item>
            <!--            <Item>It can fold and unfold these objects.-->
                <!--TODO abstract nature has to be made clear </Item>-->
        </Enum>
        The remainder of this chapter is a measured introduction into
        the main data structure of the package and some simple capabilities. 
        Chapter <Ref Chap="PolygonalStructures"/> contains the formal definitions
        of these concepts.
        Chapter <Ref Chap="ExampleApplications"/> contains some more advanced
        usage examples.

    </Section>

    <!-- In this section the difficulty of the concepts slowly increases. 
         This has been done on purpose to make each individual step easier 
         (almost trivial) to follow. Ideally no one will be turned off by 
         initial confusion over too many parameters.
         
         This follows from our balancing philosophy: The description of
         surfaces by their incidence structure is cumbersome but necessary.
         In contrary the interest of people in surfaces may not be that big.
         Especially if they believe in a simpler representation for a special
         case they might not want to consider a complicated package.
         Therefore we start without any internal details of our surfaces and
         only gradually make more and more internal structure visible.
         -->
    <Section Label="Introduction_Playing">
        <Heading>Playing with simplicial surfaces</Heading>
        Since the platonic solids are pre-defined in the 
        <K>SimplicialSurfaces</K>-package we use them to show a few 
        capabilities of this package.
        <!-- This sentence informs the user about a way to define some surfaces 
             which helps them to test more cases themselves.
             It also connects the surfaces to something familiar. The 
             formulation of this sentence is still dangerous as it should
             neither promise too much, nor trivialize the contents of this 
             section. (TODO) -->
        We will use the cube as an example.
        <!-- Why the cube? Because we believe it is the one platonic solid
             that most people know best. Furthermore it is easy to understand
             as it has only 8 vertices. The tetrahedron would be even simpler
             but it is a bit less known. The octahedron is more difficult to
             grasp at a glance from a picture, the dodecahedron is usually
             not more than a curiosity while the icosahedron is too big. -->
        <Alt Only="HTML">
        &lt;br>&lt;img src='./images/_Wrapper_intro-1-1.svg'> &lt;/img> &lt;br>
        </Alt>
        <Alt Only = "LaTeX">
        \begin{center}
        \includegraphics{images/_Wrapper_intro-1.pdf}
        \end{center}
        </Alt>
        <Alt Only = "Text">
        Image omitted in terminal text
        </Alt>
<Example>
gap&gt; surface := Cube();;
</Example>
        We can compute elementary properties of the surface
<Example>
gap&gt; NumberOfVertices(surface);
8
gap&gt; NumberOfEdges(surface);
12
gap&gt; NumberOfFaces(surface);
6
gap&gt; EulerCharacteristic(surface);
2
</Example>
    <!--TODO has closed to be explained?-->
    <!--TODO closed implies compact -> what about infinite surfaces? -->
        and we can show that the surface is homeomorphic to a sphere by 
        verifying that it is closed, connected and orientable.
        <!-- This is a risky sentence - We want to give interested people
             something that they can use immediately, we want new people
             to not be overwhelmed and we don't just want to state some
             random properties.
             This sentence tries to strike a balance by connecting the
             random properties to a bigger question (homeomorphism) but
             its casual mentioning should allow readers to ignore this
             part of the sentence if they feel it too complicated. -->
<Example>
gap&gt; IsClosedSurface(surface);
true
gap&gt; IsConnected(surface);
true
gap&gt; IsOrientable(surface);
true
</Example>
        We can also compute more complicated properties like the 
        automorphism group and check for isomorphisms between surfaces. 
    <!-- TODO do so, probably with a tetrahedron: Be careful to not overdo it! --> 
        
    </Section>


    <Section Label="Introduction_EasyConstruction">
        <Heading>Constructing new surfaces</Heading>
        In most cases one is not interested in the properties of platonic 
        solids (usually one already knows a lot about them). Therefore we need 
        a way to tell the package about the surfaces we are interested in. 
        <!-- This is an obvious point. We make it here to ensure the reader
             that we do not go on irrelevant tangents for too long. Furthermore
             we are probably in agreement with the reader here, which will
             make them more positively inclined to our manual. -->
        <Alt Only="Text">
            As a test case we consider a surface that consists of only three 
            triangles T1, T2 and T3. We want that T2 shares an edge with both 
            T1 and T3, but T1 and T3 should not be connected otherwise.
        </Alt>
        <Alt Not="Text">
            As a test case we consider a surface of three triangles that are 
            connected by edges, like this:
        </Alt>
        <Alt Only="HTML">
        &lt;br>&lt;img src='./images/_Wrapper_intro-2-1.svg'> &lt;/img> &lt;br>
        </Alt>
        <Alt Only = "LaTeX">
        \begin{center}
        \includegraphics{images/_Wrapper_intro-2.pdf}
        \end{center}
        </Alt>
        <Alt Only = "Text">
        Image omitted in terminal text
        </Alt>

        Disregarding lengths and angles, we can describe this surface quite
        easily by labelling its faces and vertices.
        In our case each triangle is determined by its three vertices.
        <Alt Only="Text">
            The vertex of T1 that is not a vertex of T2 will be called V1, the 
            vertex that is shared by all triangles is called V2, the final 
            vertex of T1 is V3, the final vertex of T2 is V4 and the last 
            vertex will be called V5. Then the face T1 consists of the vertices 
            V1,V2,V3. The face T2 contains V2,V3,V4 and the face T3 has 
            V2,V4,V5.
        </Alt>
        <Alt Only="HTML">
        &lt;br>&lt;img src='./images/_Wrapper_intro-3-1.svg'> &lt;/img> &lt;br>
        </Alt>
        <Alt Only = "LaTeX">
        \begin{center}
        \includegraphics{images/_Wrapper_intro-3.pdf}
        \end{center}
        </Alt>
        <Alt Only = "Text">
        Image omitted in terminal text
        </Alt>
        <Alt Not="Text">
            For example the face I consists of the vertices [1, 2, 3] and the 
            face III has the vertices [3, 4, 5].
        </Alt>

        To encode the incidence structure of this surface it is sufficient
        to know which vertices lie in which faces.
        We can encode this information as a list with three entries (one for 
        each face). The list entry at position <M>p</M> is a list of all 
        vertices that are incident to the face with number <M>p</M> (their
        order is not important). In our 
        example this looks like this:
<Example>
gap&gt; verticesOfFaces := [ [1,2,3], [2,3,4], [3,5,4] ];
[ [ 1, 2, 3 ], [ 2, 3, 4 ], [ 3, 5, 4  ] ]
</Example>
        From this information we can construct a simplicial surface
<Example>
gap&gt; surf := SimplicialSurfaceByVerticesInFaces( verticesOfFaces );;
</Example>
        that retains this information (note that the order of the incident
        lists can change (here for [3, 5, 4]) as they are
        internally converted into sets):
<Example>
gap&gt; VerticesOfFaces(surf);
[ [ 1, 2, 3 ], [ 2, 3, 4 ], [ 3, 4, 5 ] ]
</Example>

        A slightly more complicated example is a Möbius-strip.
        <!-- TODO better colour for identified edges? -->
        <Alt Only="HTML">
        &lt;br>&lt;img src='./images/_Wrapper_intro-5-1.svg'> &lt;/img> &lt;br>
        </Alt>
        <Alt Only = "LaTeX">
        \begin{center}
        \includegraphics{images/_Wrapper_intro-5.pdf}
        \end{center}
        </Alt>
        <Alt Only = "Text">
        Image omitted in terminal text
        </Alt>
        <Alt Not="Text">
            In this case the left-most and right-most edges are identified.
        </Alt>
<Example>
gap&gt; moebius := SimplicialSurfaceByVerticesInFaces(
&gt;                            [[1,2,3],[2,3,4],[3,4,5],[4,5,1],[5,2,1]]);;
gap&gt; IsOrientable(moebius);
false
</Example>
<!-- TODO can you avoid the colour loss? Can't we just use the gap-prompt as a left fixture -->
        
        <Subsection Label="Introduction_NonTriangularCase">
            <Heading>Creating non-triangular faces</Heading>
            <Alt Only="LaTeX">
                \addcontentsline{toc}{subsection}{Non--triangular faces}
            </Alt>
            <!-- This is an optional section. It is necessary to give the 
                 people who are concerned about non-triangular faces something
                 to work with. At the same time it might be too much for those
                 who only care about triangles.
                 Therefore we aim to make this section easy to skip. It must not
                 be too long and it must not have essential information for 
                 triangular faces.
                 That being said, many people that do not actually care about
                 it will read this section (it does not matter if we told them
                 to stop), for various reasons:
                 1) Some never skip. To accommodate them, the section should not
                    be too taxing and it should have something of interest for
                    them.
                 2) Some hope to further their understanding of the material by
                    reading this "advanced" section, for example by putting the
                    easier case into a more general context. For those readers
                    we should explain a bit about this context.
                 Overall this suggests that we put some contextual information
                 in this section that might be interesting to everyone. Since
                 we want to encourage skipping it at the same time, this has to
                 be rather mild information. -->
            If we want to construct surfaces with non-triangular faces, we 
            have to use the
            method <K>PolygonalSurfaceByVerticesInFaces</K>. We also have to
            be more careful since this method is a bit more subtle.
            <!--TODO add references?-->
            <!-- This formulation should help people with skipping this section.
                 If someone only cares about triangles and is a bit impatient
                 they will hopefully say "I don't want that" and skip ahead.-->
            We consider the example of a pyramid with a square base.
            <Alt Only="HTML">
            &lt;br>&lt;img src='./images/_Wrapper_intro-6-1.svg'> &lt;/img> &lt;br>
            </Alt>
            <Alt Only = "LaTeX">
            \begin{center}
            \includegraphics{images/_Wrapper_intro-6.pdf}
            \end{center}
            </Alt>
            <Alt Only = "Text">
            Image omitted in terminal text
            </Alt>
            To encode this surface we have to enumerate the faces.
            <!-- TODO Is there a way to properly do this in the picture?-->
            But if we try to input the surface
<Example>
gap&gt; pyr := PolygonalSurfaceByVerticesInFaces( 
&gt;                    [[2,3,4,5], [1,2,3], [1,3,5], [1,5,4],[1,2,4]] );;
</Example>
            we notice something strange: The resulting surface has the wrong
            number of edges (10 instead of 8) and is not closed. 
            <!-- Why do we do it this way? There are a few reasons, some of
                 them interdependent:
                 1) We are telling a story (small as it may be), a story of
                    some trial that encounters a hardship on the way. Since
                    people are more prone to reading and remembering stories,
                    this section should be more memorable to them than a
                    boring description.
                 2) The explanation why this example does not work is quite
                    technical. Therefore readers are likely to skip it. The
                    storyfication raises the probability of reading and it
                    also raises the probability that people will remember
                    this section as "there was a problem with that, I don't
                    remember the details" if they skimmed the explanation.
                 3) It gives frustrated users a target for jumping (after
                    they got confused by their bad input). -->
<Example>
gap&gt; NumberOfEdges(pyr);
10
gap&gt; IsClosedSurface(pyr);
false
</Example>
            Since this seems strange it would be natural to check the edges.
            For that the method <K>VerticesOfEdges</K> (which will be 
            explained in more detail in section 
            <Ref Sect="Introduction_EdgeNumbering"/>) can be used. It shows
            for each edge its incident vertices.
<Example>
gap&gt; VerticesOfEdges(pyr);
[ [ 1, 2 ], [ 1, 3 ], [ 1, 4 ], [ 1, 5 ], [ 2, 3 ], [ 2, 4 ], 
        [ 2, 5 ], [ 3, 4 ], [ 3, 5 ], [ 4, 5 ] ]
</Example>
            This shows that in addition to the expected edges we also have
            the edges [ 2, 5 ] and [ 3, 4 ]. How did those edges get added?
            <P/>
            <!-- The above concrete calculation of the edges is risky since
                 it uses (implicit) knowledge of the edge labels.
                 At the same time it would be a natural reaction in this
                 kind of situations. -->

            The problem is: We did not tell the method 
            <K>PolygonalSurfaceByVerticesInFaces</K> what the edges
            should be. For triangular faces this is not an issue because
            there is an edge between any pair of vertices. But for the square
            face in our example the vertices do <Emph>not</Emph> determine its
            edges.<P/>
            
            The method <K>PolygonalSurfaceByVerticesInFaces</K> will believe 
            that two
            adjacent vertices in the given list are also connected by an edge 
            of the face. Above, we gave the list [2, 3, 4, 5] for the square. If 
            we compare it with our picture we can see that the vertices 2 and 4 
            are connected in the picture but not adjacent in our list. Likewise 
            the vertices 2 and 5 are adjacent in the list (we imagine that the 
            list wraps around) but don't have an edge between them in the 
            picture. <P/>
            
            Instead we have to give the vertices in a proper cyclic ordering:
<Example>
gap&gt; pyr :=PolygonalSurfaceByVerticesInFaces(  
&gt;                    [[2,3,5,4], [1,2,3], [1,3,5], [1,5,4],[1,2,4]] );;
gap&gt; NumberOfEdges(pyr);
8
gap&gt; IsClosedSurface(pyr);
true
</Example>

        </Subsection>
        <!-- It is important that the section ends here - otherwise the reader might
             presume that this subsection was important for subsequent subsections and
             would be more reluctant to skip it. Additionally the bigger font of the
             sections makes them easier to find - which makes them an easier target
             for the end of a skip. -->
    </Section>

    <!--TODO since this section is a skipping target, it should have a more evocative
         name that stops people from infinite skipping.-->
    <!-- This section explains how to use surfaces without knowing about the edges.-->
    <Section Label="Introduction_AccessVerticesFaces">
        <Heading>Playing with vertices and faces.</Heading>
        After having learned how to construct a simplicial surface by the method
        <K>SimplicialSurfaceByVerticesInFaces</K>, we can use the labelling of vertices
        and faces to get more detailed information about the surface. We will
        use the example from section
        <Ref Sect="Introduction_EasyConstruction"/>:
        <Alt Only="HTML">
        &lt;br>&lt;img src='./images/_Wrapper_intro-4-1.svg'> &lt;/img> &lt;br>
        </Alt>
        <Alt Only = "LaTeX">
        \begin{center}
        \includegraphics{images/_Wrapper_intro-4.pdf}
        \end{center}
        </Alt>
        <Alt Only = "Text">
        Image omitted in terminal text
        </Alt>
<Example>
gap&gt; surf := SimplicialSurfaceByVerticesInFaces( [[1,2,3],[2,3,4],[3,4,5]] );;
</Example>
        It is easy to reclaim the complete incidence structure that went into the
        construction.
<Example>
gap&gt; Vertices(surf);
[ 1, 2, 3, 4, 5 ]
gap&gt; Faces(surf);
[ 1 .. 3 ]
gap&gt; VerticesOfFaces(surf);
[ [ 1, 2, 3 ], [ 2, 3, 4 ], [ 3, 4, 5 ] ]
</Example>
        By using the incidence-structure we can distinguish vertices that lie 
        in a different number of faces.
<Example>
gap&gt; FaceDegreesOfVertices(surf);
[ 1, 2, 3, 2, 1]
</Example>
        The first entry of this list counts the number of faces that are
        incident to the vertex 1 (in general the <M>i</M>-th entry counts 
        those for the vertex <M>i</M>).<P/>
        In this case it is apparent that the third vertex is incident to three
        different faces and unique with that property. To distinguish vertices
        1 and 5 (that are incident to one face each), we need to know which
        faces they are incident to.
<Example>
gap&gt; FacesOfVertices(surf);
[ [ 1 ], [ 1, 2 ], [ 1, 2, 3 ], [ 2, 3 ], [ 3 ] ]
</Example>
        So the first vertex is incident to the face 1 and the fifth vertex is
        incident to face 3. We can also see that the second vertex is incident
        to the faces 1 and 2.<P/>
        An additional advantage of the incidental information is that we can
        determine a concrete global orientation if the surface is orientable.
        From the method <K>Orientation</K> (<Ref Subsect="Orientation"/>) we 
        can compute a list of 
        permutations such
        that the <M>i</M>-th entry is a cyclic permutation of the vertices in face 
        <M>i</M>.
<Example>
gap&gt; List( Orientation(surf), VerticesAsPerm );
[ (1,2,3), (2,4,3), (3,4,5) ]
</Example>
    <!-- We only show this snippet and hope that an interested reader will
         be able to find the alternative representations easily enough by
         looking at the table of contents. -->
    <!-- At this point people should be able to generalize our naming
         conventions for operations. As this is quite important, we try to
         teach the correct spelling subconsciously at first. When we explain
         it in text, it should not be surprising to readers. -->
    </Section>


    <Section Label="Introduction_EdgeNumbering">
        <Heading>Adding edge numbering</Heading>
        Up until now we did not care about specific edges because they were
        not important for the construction of our examples so far. But let us
        assume that we want to know which edges are incident to exactly two
        faces in our example from before.
        <Alt Only="HTML">
        &lt;br>&lt;img src='./images/_Wrapper_intro-7-1.svg'> &lt;/img> &lt;br>
        </Alt>
        <Alt Only = "LaTeX">
        \begin{center}
        \includegraphics{images/_Wrapper_intro-7.pdf}
        \end{center}
        </Alt>
        <Alt Only = "Text">
        Image omitted in terminal text
        </Alt>
<Example>
gap&gt; surf := SimplicialSurfaceByVerticesInFaces( [[1,2,3],[2,3,4],[3,4,5]] );;
</Example>
        We can see the edges by calling
<Example>
gap&gt; Edges(surf);
[ 1, 2, 3, 4, 5, 6, 7 ]
</Example>
        but this does not tell us where they are. For that we may use
<Example>
gap&gt; VerticesOfEdges(surf);
[ [ 1, 2 ], [ 1, 3 ], [ 2, 3 ], [ 2, 4 ], [ 3, 4 ], [ 3, 5 ], [ 4, 5 ] ]
</Example>
        As before, the first entry of this list contains the vertices of the
        first edge. In our example the edge with number 1 is incident to the
        vertices 1 and 2. We can update our picture:
        <Alt Only="HTML">
        &lt;br>&lt;img src='./images/_Wrapper_Image_ThreeTrianglesInLine.svg'> &lt;/img> &lt;br>
        </Alt>
        <Alt Only = "LaTeX">
        \begin{center}
        \begin{center}
        \includegraphics{images/_Wrapper_Image_ThreeTrianglesInLine.pdf}
        \end{center}
        \end{center}
        </Alt>
        <Alt Only = "Text">
        Image omitted in terminal text
        </Alt>
        If we now want to know which edges are incident to exactly two
        faces, we only have to check
<Example>
gap&gt; FacesOfEdges(surf);
[ [ 1 ], [ 1 ], [ 1, 2 ], [ 2 ], [ 2, 3 ], [ 3 ], [ 3 ] ]
</Example>
        The positions with lists of two elements are the interesting
        edges. We can compute them easily by
<Example>
gap&gt; Filtered( Edges(surf), e -> Size(FacesOfEdges(surf)[e]) = 2 );
[ 3, 5 ]
</Example>
    </Section>


    <Section Label="Introduction_GeneralConstructor">
        <Heading>Constructing surfaces with vertex, edge and face data</Heading>

        There are some cases in which we don't want to use
        <K>SimplicialSurfaceByVerticesInFaces</K> but a more versatile method,
        for example
        <Enum>
            <Item>We already have an edge labelling and want to keep it.</Item>
            <Item>The faces of our surface are not determined by their
                vertices.</Item>
        </Enum>
        An example of the second situation is given by two triangles 
        that share exactly two edges. They can be visualized as an "open bag".
        <Alt Only="HTML">
        &lt;br>&lt;img src='./images/_Wrapper_intro-8-1.svg'> &lt;/img> &lt;br>
        </Alt>
        <Alt Only = "LaTeX">
        \begin{center}
        \includegraphics{images/_Wrapper_intro-8.pdf}
        \end{center}
        </Alt>
        <Alt Only = "Text">
        Image omitted in terminal text
        </Alt>
        Since both faces share the same vertices we can't use 
        <K>SimplicialSurfaceByVerticesInFaces</K> here. Instead we need to label
        vertices, edges and faces individually: 
        <Alt Only="HTML">
        &lt;br>&lt;img src="./images/_Wrapper_Image_OpenBag.svg"> &lt;/img> &lt;br>
        </Alt>
        <Alt Only = "LaTeX">
        \begin{center}
        \includegraphics{images/_Wrapper_Image_OpenBag.pdf}
        \end{center}
        </Alt>
        <Alt Only = "Text">
        Image omitted in terminal text
        </Alt>
        Now we have to tell &GAP; which vertices are incident to which edges
<Example>
gap&gt; verticesOfEdges := [[1,2],[1,3],[2,3],[2,3]];;
</Example>
        and which edges are incident to which face
<Example>
gap&gt; edgesOfFaces := [[1,2,4],[1,2,3]];;
</Example>
        which allows us to use the constructor
        <K>SimplicialSurfaceByDownwardIncidence</K> (for an explanation of this name,
        see section <Ref Sect="Section_Constructors_DownwardIncidence"/>)
<Example>
gap&gt; bag := SimplicialSurfaceByDownwardIncidence(verticesOfEdges, edgesOfFaces);;
</Example>
        It would be nice if we were able to easily determine which edges/faces
        are not determined by their vertices alone. For that purpose we can use
        the following commands:
<Example>
gap&gt; EdgeAnomalyClasses(bag);
[ [ 1 ], [ 2 ], [ 3, 4 ] ]
gap&gt; FaceAnomalyClasses(bag);
[ [ 1, 2 ] ]
</Example>
        The list of edge-anomaly-classes is a partition of the edges such that 
        two
        edges are in the same equivalence class if and only if they have the
        same vertices. So we see here that the edges 3 and 4 have the same
        vertices. We can do the same for the faces and see that the two faces
        share all their vertices.
    </Section>
</Chapter>

