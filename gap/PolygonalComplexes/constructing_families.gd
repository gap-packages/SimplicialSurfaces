#! @Chapter Generating certain simplicial surfaces
#! @ChapterLabel Generating

#! This chapter introduces methods to find all simplicial surfaces with certain
#! restrictions. 
#! Section <Ref Sect="Section_Strings_Rings"/> includes several constuction 
#! methods for simplex rings and strings.
#! In Section <Ref Sect="Section_Generating_Butterfly_Insertion"/> 
#! all simplicial surfaces for a given vertex-faithful simplicial surface 
#! are constructed which can be generated by using essential butterfly insertion.
#! Simplicial surfaces which have isomorphic face graphs are computed in
#! Section <Ref Sect="Section_Edge_Face_Equivalent"/> by using different approaches.

#! @Section Simplex String and Rings
#! @SectionLabel Strings_Rings

#! This section includes different possibilities to construct simplex string and rings.
#! A simplex string is a simplicial surface that it is connected and it is a single triangle or
#! exactly two of its faces (end faces) have two boundary edges and all other
#! faces have exactly one inner and two outer edges.
#! If all vertices of a simplex string have degree at least three, it is called a 
#!simplicial strip or open geodesic.
#! A simplicial surface is a simplex ring if it is connected and each face
#! has exactly one inner and two outer edges. If all vertices of a simplex ring have
#! degree 3, it is called a (closed) geodesic.
#! Note that a simplicial umbrella is a simplex ring with exactly one inner vertex.

#! @BeginGroup SimplexStringByIsomorphismType
#! @Description
#! This method constructs a simplex string given its isomorphism type.
#! Simplex strings can be described uniquely by their isomorphism type which is a list
#! <K>[n_1,...,n_k]</K>. 
#! The simplex string with isomorphism type <K>[n_1,...,n_k]</K> has <K>n_1+...+n_k</K> faces
#! and is constructed based on a strip with <K>k</K> faces where the i-th faces is subdivided in <K>n_i</K>
#! faces, as shown in <Ref Subsect="SimplexRingByIsomorphismType"/>.
#! 
#! As an example consider the simplex string with isomorphism type <K>[1,2,3]</K>:
#! @BeginExampleSession
#! gap> string:=SimplexStringByIsomorphismType([1,2,3]);
#! simplicial surface (8 vertices, 13 edges, and 6 faces)
#! gap> UmbrellaDescriptorOfSurface(string);
#! [ [ 1 ], [ 1, 2 ], [ 4, 3, 2, 1 ], [ 2, 3 ], [ 3, 4, 5, 6 ], [ 4, 5 ], [ 5, 6 ], 
#!   [ 6 ] ]
#! gap> IsSimplexString(string);
#! true
#! @EndExampleSession
#! 
#! @Returns a simplicial surface
#! @Arguments isomorphismType
DeclareOperation( "SimplexStringByIsomorphismType", [IsList] );
#! @EndGroup

#! @BeginGroup SimplicialOpenGeodesic
#! @Description
#! Return a simplicial surface consisting of one non-closed geodesic-path
#! with <A>nrFaces</A> triangles. The labels are assigned according
#! to the following illustration (for <M>n</M> odd), 
#! in which <M>n</M> is <A>nrFaces</A>.
#!  <Alt Only="HTML">
#! &lt;br>&lt;img src="./images/_Wrapper_Image_SimplicialOpenGeodesic-1.svg"> &lt;/img> &lt;br>
#! </Alt>
#! <Alt Only = "LaTeX">
#! \begin{center}
#! \includegraphics{images/_Wrapper_Image_SimplicialOpenGeodesic.pdf}
#! \end{center}
#! </Alt>
#! <Alt Only = "Text">
#! Image omitted in terminal text
#! </Alt>
#!
#! @ExampleSession
#! gap> geo4 := SimplicialOpenGeodesic(4);
#! simplicial surface (6 vertices, 9 edges, and 4 faces)
#! gap> VerticesOfEdges(geo4);
#! [ [ 1, 2 ], [ 1, 3 ], [ 2, 3 ], [ 2, 4 ], [ 3, 4 ], [ 3, 5 ], [ 4, 5 ], 
#!   [ 4, 6 ], [ 5, 6 ] ]
#! gap> EdgesOfFaces(geo4);
#! [ [ 1, 2, 3 ], [ 3, 4, 5 ], [ 5, 6, 7 ], [ 7, 8, 9 ] ]
#! gap> VerticesOfFaces(geo4);
#! [ [ 1, 2, 3 ], [ 2, 3, 4 ], [ 3, 4, 5 ], [ 4, 5, 6 ] ]
#! gap> 
#! gap> geo5 := SimplicialStrip(5);
#! simplicial surface (7 vertices, 11 edges, and 5 faces)
#! gap> VerticesOfEdges(geo5);
#! [ [ 1, 2 ], [ 1, 3 ], [ 2, 3 ], [ 2, 4 ], [ 3, 4 ], [ 3, 5 ], [ 4, 5 ], 
#!   [ 4, 6 ], [ 5, 6 ], [ 5, 7 ], [ 6, 7 ] ]
#! gap> EdgesOfFaces(geo5);
#! [ [ 1, 2, 3 ], [ 3, 4, 5 ], [ 5, 6, 7 ], [ 7, 8, 9 ], [ 9, 10, 11 ] ]
#! @EndExampleSession
#!
#!
#! @Returns a simplicial surface
#! @Arguments nrFaces
DeclareOperation( "SimplicialOpenGeodesic", [ IsPosInt ] );
#! @Arguments nrFaces
DeclareOperation( "SimplicialStrip", [ IsPosInt ] );
#! @EndGroup

#! @BeginGroup SimplexRingByIsomorphismType
#! @Description
#! This method constructs a simplex ring given its isomorphism type.
#! They can be described uniquely by their isomorphism type which is a list
#! <K>[n_1,...,n_k]</K>. 
#! The simplex ring with isomorphism type <K>[n_1,...,n_k]</K> has <K>n_1+...+n_k</K> faces
#! and is constructed based on a closed geodesic with <K>k</K> faces where the i-th faces is subdivided in <K>n_i</K>
#! faces. How the subdivision is defined can be seen in the picture below.
#! The incidences between vertices and faces can also be observed there.
#! 
#! As an example consider the simplex ring with isomorphism type <K>[1,2,3]</K>, where the left and right edge have to be identified:
#! <Alt Only="HTML">
#! &lt;br>&lt;img src="./images/_Wrapper_Image_SimplexString-1.svg"> &lt;/img> &lt;br>
#! </Alt>
#! <Alt Only = "LaTeX">
#! \begin{center}
#! \includegraphics{images/_Wrapper_Image_SimplexString.pdf}
#! \end{center}
#! </Alt>
#! <Alt Only = "Text">
#! Image omitted in terminal text
#! </Alt>
#! @BeginExampleSession
#! gap> ring:=SimplexRingByIsomorphismType([1,2,3]);
#! simplicial surface (6 vertices, 12 edges, and 6 faces)
#! gap> UmbrellaDescriptorOfSurface(ring);
#! [ [ 2, 1, 6 ], [ 1, 2, 3, 4 ], [ 2, 3 ], [ 1, 6, 5, 4, 3 ], [ 4, 5 ], [ 5, 6 ] ]
#! gap> IsClosedSurface(ring);
#! false
#! gap> IsOrientableSurface(ring);
#! false
#! gap> IsSimplexRing(ring);
#! true
#! @EndExampleSession
#! 
#! @Returns a simplicial surface
#! @Arguments isomorphismType
DeclareOperation( "SimplexRingByIsomorphismType", [IsList] );
#! @EndGroup

#! @BeginGroup SimplicialClosedGeodesic
#! @Description
#! Return a simplicial surface consisting of one closed geodesic-path
#! with <A>nrFaces</A> triangles (at least 3 faces are needed). 
#! The labels are assigned according
#! to the following illustration (for <M>n</M> odd), 
#! in which <M>n</M> is <A>nrFaces</A>.
#!  <Alt Only="HTML">
#! &lt;br>&lt;img src="./images/_Wrapper_Image_SimplicialClosedGeodesic-1.svg"> &lt;/img> &lt;br>
#! </Alt>
#! <Alt Only = "LaTeX">
#! \begin{center}
#! \includegraphics{images/_Wrapper_Image_SimplicialClosedGeodesic.pdf}
#! \end{center}
#! </Alt>
#! <Alt Only = "Text">
#! Image omitted in terminal text
#! </Alt>
#!
#! @ExampleSession
#! gap> geo3 := SimplicialClosedGeodesic(3);
#! simplicial surface (3 vertices, 6 edges, and 3 faces)
#! gap> VerticesOfEdges(geo3);
#! [ [ 1, 2 ], [ 1, 3 ], [ 2, 3 ], [ 1, 2 ], [ 1, 3 ], [ 2, 3 ] ]
#! gap> EdgesOfFaces(geo3);
#! [ [ 1, 2, 3 ], [ 3, 4, 5 ], [ 1, 5, 6 ] ]
#! gap> VerticesOfFaces(geo3);
#! [ [ 1, 2, 3 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ]
#! gap> 
#! gap> geo6 := SimplicialGeodesic(6);
#! simplicial surface (6 vertices, 12 edges, and 6 faces)
#! gap> VerticesOfEdges(geo6);
#! [ [ 1, 2 ], [ 1, 3 ], [ 2, 3 ], [ 2, 4 ], [ 3, 4 ], [ 3, 5 ], [ 4, 5 ],
#!   [ 4, 6 ], [ 5, 6 ], [ 1, 5 ], [ 1, 6 ], [ 2, 6 ] ]
#! gap> EdgesOfFaces(geo6);
#! [ [ 1, 2, 3 ], [ 3, 4, 5 ], [ 5, 6, 7 ], [ 7, 8, 9 ], [ 9, 10, 11 ], [ 1, 11, 12 ] ]
#! @EndExampleSession
#!
#!
#! @Returns a simplicial surface
#! @Arguments nrFaces
DeclareOperation( "SimplicialClosedGeodesic", [ IsPosInt ] );
#! @Arguments nrFaces
DeclareOperation( "SimplicialGeodesic", [ IsPosInt ] );
#! @EndGroup

#! <ManSection Label="SimplicialUmbrella"> 
#!   <Oper Name="SimplicialUmbrella" Arg="nrFaces" Label="for IsPosInt"/>
#!   <Filt Name="SimplicialGon" Arg="nrFaces" Type="operation"/>
#!   <Returns><K>a simplicial surface</K></Returns>
#!   <Description>
#!   Returns a simplex ring with <A>nrFaces</A> and exactly one inner vertex. 
#!   The labels are assigned according to the following illustration, in which
#!   <M>n</M> is <A>nrFaces</A>:
#!  <Alt Only="HTML">
#! &lt;br>&lt;img src='./images/_Wrapper_library-1-1.svg'> &lt;/img> &lt;br>
#! </Alt>
#! <Alt Only = "LaTeX">
#! \begin{center}
#! \includegraphics{images/_Wrapper_library-1.pdf}
#! \end{center}
#! </Alt>
#! <Alt Only = "Text">
#! Image omitted in terminal text
#! </Alt>
#!
#! @ExampleSession
#! gap> umb4 := SimplicialUmbrella(4);
#! simplicial surface (5 vertices, 8 edges, and 4 faces)
#! gap> VerticesOfEdges(umb4);
#! [ [ 1, 5 ], [ 2, 5 ], [ 3, 5 ], [ 4, 5 ], [ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 1, 4 ] ]
#! gap> EdgesOfFaces(umb4);
#! [ [ 1, 2, 5 ], [ 2, 3, 6 ], [ 3, 4, 7 ], [ 1, 4, 8 ] ]
#! gap> VerticesOfFaces(umb4);
#! [ [ 1, 2, 5 ], [ 2, 3, 5 ], [ 3, 4, 5 ], [ 1, 4, 5 ] ]
#! gap> umb2 := SimplicialUmbrella(2);
#! simplicial surface (3 vertices, 4 edges, and 2 faces)
#! gap> VerticesOfEdges(umb2);
#! [ [ 1, 3 ], [ 2, 3 ], [ 1, 2 ], [ 1, 2 ] ]
#! gap> EdgesOfFaces(umb2);
#! [ [ 1, 2, 3 ], [ 1, 2, 4 ] ]
#! @EndExampleSession 
#!   </Description>
#! </ManSection>
# here no AutoDoc documentation since synonyms can't be handled automatically
DeclareOperation("SimplicialUmbrella", [ IsPosInt ] );
DeclareSynonym("SimplicialGon", SimplicialUmbrella);


#! @Section Generation by butterfly insertion
#! @SectionLabel Generating_Butterfly_Insertion

#! This section contains a method to compute for a given vertex-faithful 
#! simplicial surface all simplicial surfaces that can be constructed by 
#! essential butterfly insertions.

#! @BeginGroup AllSimplicialSurfacesByEssentialButterflyInsertion
#! @Description
#! This function computes representatives of the isomorphism classes of
#! all simplicial surfaces that can be obtained from
#! the input surface <A>surf</A> by an essential butterfly insertion.
#! Note that the input surface <A>surf</A> has to be vertex-faithful.
#! An essential butterfly insertion is a butterfly insertion that does not
#! create a 3-waist.
#!
#! @BeginLogSession
#! gap> surface := SimplicialSurfaceByDownwardIncidence(
#! > [ [ 1, 3 ], [ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 1, 4 ], [ 1, 5 ], [ 1, 6 ],
#! > [ 2, 6 ], [ 2, 7 ], [ 3, 7 ], [ 3, 8 ], [ 4, 8 ], [ 4, 5 ],  [ 5, 6 ],
#! > [ 6, 7 ], [ 7, 8 ], [ 5, 8 ] ],
#! > [ [1, 2, 3], [1, 4, 5], [6, 7, 14], [2, 7, 8], [8, 9, 15],
#! > [3, 9, 10], [10, 11, 16], [4, 11, 12], [12, 13, 17], [5, 6, 13] ]);
#! simplicial surface (8 vertices, 17 edges, and 10 faces)
#! gap> IsConnectedSurface(surface);
#! true
#! gap> EulerCharacteristic(surface);
#! 1
#! gap> AllSimplicialSurfacesByEssentialButterflyInsertion(surface);
#! [ simplicial surface (9 vertices, 20 edges, and 12 faces),
#! simplicial surface (9 vertices, 20 edges, and 12 faces)
#!     , simplicial surface (9 vertices, 20 edges, and 12 faces), 
#!  simplicial surface (9 vertices, 20 edges, and 12 faces) ]
#! @EndLogSession
#! @Arguments surface
#! @Returns a list of simplicial surfaces
DeclareOperation( "AllSimplicialSurfacesByEssentialButterflyInsertion", [IsSimplicialSurface] );
#! @EndGroup



#! @Section Edge-Face equivalent simplicial surfaces
#! @SectionLabel Edge_Face_Equivalent

#! This section contains method to compute edge-face equivalent simplicial surfaces.
#! Two simplicial surfaces are called edge-face equivalent if their face-graphs are isomorphic.

#! @BeginGroup AllSimplicialSurfacesOfDigraph 
#! @Description 
#! Return all (vertex-faithful) simplicial surfaces, that have <K>digraph</K> as face graph or are edge-face
#! equivalent to <K>surface</K>. 
#! Note that <K>digraph</K> has to be cubic, connected, symmetric and simple and <K>surface</K> has to 
#! be a closed surface.
#! The parameter <K>vertexfaithful</K> indicates whether only vertex-faithful simplicial surfaces are searched, 
#! where the default value is <K>false</K>.
#! The vertices of a simplicial surface can be identified with certain cycles in the face graph. 
#! This method searches possible combinations of cycles, with the cycles corresponding to the vertices
#! of a simplicial surface.
#!
#!
#! For example, consider the complete graph on four nodes:
#!  <Alt Only="HTML">
#! &lt;br>&lt;img src="./images/_Wrapper_Image_FaceGraphTetra-1.svg"> &lt;/img> &lt;br>
#! </Alt>
#! <Alt Only = "LaTeX">
#! \begin{center}
#! \includegraphics{images/_Wrapper_Image_FaceGraphTetra.pdf}
#! \end{center}
#! </Alt>
#! <Alt Only = "Text">
#! Image omitted in terminal text
#! </Alt>
#!
#! @BeginLogSession
#! gap> digraph:=CompleteDigraph(4);;
#! gap> tet1 := AllSimplicialSurfacesOfDigraph(digraph,true);
#! [ simplicial surface (4 vertices, 6 edges, and 4 faces) ]
#! gap> IsIsomorphic(tet1[1],Tetrahedron());
#! true
#! @EndLogSession
#! So the only vertex-faithful simplicial surface of the digraph is the tetrahedron. 
#! But there is another simplicial surface, which is not vertex-faithful:
#! @BeginLogSession
#! gap> list := AllSimplicialSurfacesOfDigraph(digraph,false);
#! [ simplicial surface (4 vertices, 6 edges, and 4 faces), 
#! simplicial surface (3 vertices, 6 edges, and 4 faces)]
#! gap> tet2 := Filtered(list,IsVertexFaithful);
#! [ simplicial surface (4 vertices, 6 edges, and 4 faces) ]
#! gap> IsIsomorphic(tet2[1],Tetrahedron());
#! true
#! gap> AllSimplicialSurfacesByFacesOfEdges (Tetrahedron());
#! [ simplicial surface (4 vertices, 6 edges, and 4 faces),
#!   simplicial surface (3 vertices, 6 edges, and 4 faces) ]
#! @EndLogSession
#!
#! Since it takes a long time to compute all cycles, you should only call the method for
#! digraphs with twelve or less nodes for <K>vertexfaithful</K> equal to <K>false</K>.
#! For <K>vertexfaithful</K> equal to <K>true</K>, the method needs to consider
#! only chordless and non-separating cycles. This makes the method fast for digraphs up to 28 nodes.
#! In general, it is much faster to only compute the vertex-faithful simplicial surfaces.
#! 
#! @Arguments digraph[, vertexfaithful]
#! @Returns a list
DeclareOperation( "AllSimplicialSurfacesOfDigraph", [IsDigraph, IsBool]);
#! @Arguments surface[, vertexfaithful]
#! @Returns a list
DeclareOperation( "AllSimplicialSurfacesByFacesOfEdges", [IsSimplicialSurface, IsBool]);
#! @EndGroup

#! @BeginGroup Reembedding
#! @Description
#! The method <K>ReembeddingsOfSimplicialSphere</K> computes all edge-face equivalent simplicial surfaces
#! of the given vertex-faithful simplicial sphere <K>surf</K> with the given genus <K>g</K> if these
#! simplicial surfaces are orientable or not is given by <K>oriented</K>. Note that two simplicial surfaces are edge-face equivalent
#! if the corresponding face graphs are isomorphic (see <Ref Subsect="FaceGraph"/> for a definition of the face graph).
#! The method <K>ReembeddingsOfDigraph</K> computes for a 3-connected cubic planar graph all simplicial surfaces with the
#! given genus <K>g</K> and if these simplicial surfaces are orientable or not is given by <K>oriented</K> that
#! have <K>digraph</K> as their face graph. We call this a re-embedding of a digraph or a simplicial sphere.
#! If <K>surf</K> is not a vertex-faithful simplicial sphere or <K>digraph</K> is not planar and cubic, an error is printed.
#! It is not checked whether <K>digraph</K> is a 3-connected graph.
#!
#! Note that, non-orientable surfaces of genus one are projective planes, orientable surfaces of genus one are tori
#! and non-orientable surfaces of genus two are Klein bottles.
#!
#! For example, consider the complete graph on four vertices:
#! @BeginLogSession
#! gap> digraph:=CompleteDigraph(4);;
#! gap> ReembeddingsOfDigraph(digraph,1,false);
#! [ simplicial surface (3 vertices, 6 edges, and 4 faces) ]
#! gap> ReembeddingsOfDigraph(digraph,1,true);
#! [ ]
#! gap> ReembeddingsOfDigraph(digraph,2,false);
#! [ ]
#! @EndLogSession
#! So the complete graph on four vertices has exactly one re-embedding on a projective plane but no
#! re-embedding on the torus or the Klein bottle. Note that the complete graph on four vertices is the face graph
#! of the tetrahedron.
#! The octahedron has for example no edge-face equivalent projective plane but three edge-face equivalent tori
#! and two edge-face equivalent Klein bottles.
#! @BeginLogSession
#! gap> oct:=Octahedron();;
#! gap> ReembeddingsOfSimplicialSphere(Octahedron(),1,false);
#! [ ]
#! gap> ReembeddingsOfSimplicialSphere(Octahedron(),1,true);
#! [ simplicial surface (4 vertices, 12 edges, and 8 faces), 
#!   simplicial surface (4 vertices, 12 edges, and 8 faces),
#!   simplicial surface (4 vertices, 12 edges, and 8 faces) ]
#! gap> ReembeddingsOfSimplicialSphere(Octahedron(),2,false);
#! [ simplicial surface (4 vertices, 12 edges, and 8 faces),
#!   simplicial surface (4 vertices, 12 edges, and 8 faces) ]
#! @EndLogSession
#! 
#! @Arguments digraph, g, oriented
#! @Returns a list
DeclareOperation( "ReembeddingsOfDigraph", [IsDigraph, IsInt, IsBool]);
#! @Arguments  surf, g, oriented
#! @Returns a list
DeclareOperation( "ReembeddingsOfSimplicialSphere", [IsSimplicialSurface, IsInt, IsBool]);
#! @EndGroup

#! @Section Other pre-defined surfaces
#! @SectionLabel Library_Uncategorised
#!
#! This section contains all other pre-defined surfaces that are not
#! covered in one of the other sections.

#! @Description
#! Return a <E>one-face</E> as a simplicial surface. A one-face consists
#! of one triangular face.
#! 
#! @Returns a simplicial surface
DeclareOperation( "OneFace", [] );

#! @Description
#! Return a <E>butterfly</E> as a simplicial surface. A butterfly consists
#! of two triangular faces that share an edge.
#!
#! <Alt Only="HTML">
#! &lt;img src="./images/_Wrapper_Image_Butterfly-1.svg"> &lt;/img>
#! </Alt>
#! <Alt Only = "LaTeX">
#! \begin{center}
#! \includegraphics{images/_Wrapper_Image_Butterfly.pdf}
#! \end{center}
#! </Alt>
#! <Alt Only = "Text">
#! Image omitted in terminal text
#! </Alt>
#! 
#! @Returns a simplicial surface
DeclareOperation( "Butterfly", [] );


#! @Description
#! Return a <E>Janus-Head</E> as a simplicial surface. A Janus-Head consists
#! of two triangular faces that share three edges.
#! 
#! @InsertChunk Example_JanusHead
#! 
#! @Returns a simplicial surface
DeclareOperation( "JanusHead", [] );


#! <ManSection Label="SimplicialDoubleUmbrella"> 
#!   <Oper Name="SimplicialDoubleUmbrella" Arg="nrFaces" Label="for IsPosInt"/>
#!   <Filt Name="SimplicialDoubleGon" Arg="nrFaces" Type="operation"/>
#!   <Returns><K>a simplicial surface</K></Returns>
#!   <Description>
#!   Return a simplicial surface consisting of two closed umbrella-paths
#!   with <A>nrFaces</A> triangles which are joined at their boundary. 
#!   The labels of one umbrella are assigned according to the illustration for <E>SimplicialUmbrella</E>,
#!   the additional vertex is labelled with <A>nrFaces+2</A>, the incident edges to this vertex 
#!   are labelled from <A>2*nrFaces+1</A> to <A>4*nrFaces</A> and the incident faces are labelled from
#!   <A>nrFaces+1</A> to <A>2*nrFaces</A>.
#! @ExampleSession
#! gap> doubleumb2:=SimplicialDoubleUmbrella(2);
#! simplicial surface (4 vertices, 6 edges, and 4 faces)
#! gap> VerticesOfEdges(doubleumb2);
#! [ [ 1, 3 ], [ 2, 3 ], [ 1, 2 ], [ 1, 2 ], [ 1, 4 ], [ 2, 4 ] ]
#! gap> EdgesOfFaces(doubleumb2);
#! [ [ 1, 2, 3 ], [ 1, 2, 4 ], [ 3, 5, 6 ], [ 4, 5, 6 ] ]
#! gap> doubleumb4:=SimplicialDoubleUmbrella(4);
#! simplicial surface (6 vertices, 12 edges, and 8 faces)
#! gap> IsIsomorphic(doubleumb4,Octahedron());
#! true
#! @EndExampleSession
#!   </Description>
#! </ManSection>
# here no AutoDoc documentation since synonyms can't be handled automatically
DeclareOperation("SimplicialDoubleUmbrella", [ IsPosInt ] );
DeclareSynonym("SimplicialDoubleGon", SimplicialDoubleUmbrella);